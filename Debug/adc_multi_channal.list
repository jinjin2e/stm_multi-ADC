
adc_multi_channal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003544  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003620  08003620  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003628  08003628  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  0800363c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  0800363c  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d7b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001898  00000000  00000000  00028daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013184  00000000  00000000  0002b870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a354  00000000  00000000  0003e9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000786e7  00000000  00000000  00048d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c142f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021cc  00000000  00000000  000c1480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035ec 	.word	0x080035ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080035ec 	.word	0x080035ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <HAL_IncTick>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_IncTick(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_IncTick+0x30>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	001a      	movs	r2, r3
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <HAL_IncTick+0x34>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	18d2      	adds	r2, r2, r3
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_IncTick+0x34>)
 80004ba:	601a      	str	r2, [r3, #0]
  if(uwTick % 200 == 0){
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <HAL_IncTick+0x34>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	21c8      	movs	r1, #200	; 0xc8
 80004c2:	0018      	movs	r0, r3
 80004c4:	f7ff fea6 	bl	8000214 <__aeabi_uidivmod>
 80004c8:	1e0b      	subs	r3, r1, #0
 80004ca:	d102      	bne.n	80004d2 <HAL_IncTick+0x2a>
  		scan = SET;
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <HAL_IncTick+0x38>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
  }
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000008 	.word	0x20000008
 80004dc:	200001a8 	.word	0x200001a8
 80004e0:	200001a4 	.word	0x200001a4

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fb90 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f84e 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f9be 	bl	8000870 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f4:	f000 f996 	bl	8000824 <MX_DMA_Init>
  MX_ADC_Init();
 80004f8:	f000 f898 	bl	800062c <MX_ADC_Init>
  MX_TIM2_Init();
 80004fc:	f000 f908 	bl	8000710 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)vr_val, 2);
 8000500:	491c      	ldr	r1, [pc, #112]	; (8000574 <main+0x90>)
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <main+0x94>)
 8000504:	2202      	movs	r2, #2
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fd52 	bl	8000fb0 <HAL_ADC_Start_DMA>


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)&pwm_val[0], 1);
 800050c:	4a1b      	ldr	r2, [pc, #108]	; (800057c <main+0x98>)
 800050e:	481c      	ldr	r0, [pc, #112]	; (8000580 <main+0x9c>)
 8000510:	2301      	movs	r3, #1
 8000512:	2100      	movs	r1, #0
 8000514:	f002 f9c0 	bl	8002898 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)&pwm_val[1], 1);
 8000518:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <main+0xa0>)
 800051a:	4819      	ldr	r0, [pc, #100]	; (8000580 <main+0x9c>)
 800051c:	2301      	movs	r3, #1
 800051e:	210c      	movs	r1, #12
 8000520:	f002 f9ba 	bl	8002898 <HAL_TIM_PWM_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  		if(scan == SET){
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <main+0xa4>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d120      	bne.n	800056e <main+0x8a>
  	  				scan = RESET;
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <main+0xa4>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
  	  				HAL_ADC_Start_DMA(&hadc, (uint32_t *)vr_val, 2);
 8000532:	4910      	ldr	r1, [pc, #64]	; (8000574 <main+0x90>)
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <main+0x94>)
 8000536:	2202      	movs	r2, #2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fd39 	bl	8000fb0 <HAL_ADC_Start_DMA>
  	  				pwm_val[0] = vr_val[0] << 4;
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <main+0x90>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	b29a      	uxth	r2, r3
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <main+0x98>)
 8000548:	801a      	strh	r2, [r3, #0]
  	  				pwm_val[1] = vr_val[1] << 4;
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <main+0x90>)
 800054c:	885b      	ldrh	r3, [r3, #2]
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	b29a      	uxth	r2, r3
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <main+0x98>)
 8000554:	805a      	strh	r2, [r3, #2]
  	  				HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)&pwm_val[0], 1);
 8000556:	4a09      	ldr	r2, [pc, #36]	; (800057c <main+0x98>)
 8000558:	4809      	ldr	r0, [pc, #36]	; (8000580 <main+0x9c>)
 800055a:	2301      	movs	r3, #1
 800055c:	2100      	movs	r1, #0
 800055e:	f002 f99b 	bl	8002898 <HAL_TIM_PWM_Start_DMA>
  	  				HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)&pwm_val[1], 1);
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <main+0xa0>)
 8000564:	4806      	ldr	r0, [pc, #24]	; (8000580 <main+0x9c>)
 8000566:	2301      	movs	r3, #1
 8000568:	210c      	movs	r1, #12
 800056a:	f002 f995 	bl	8002898 <HAL_TIM_PWM_Start_DMA>
  	  		}
  	  		__NOP();
 800056e:	46c0      	nop			; (mov r8, r8)
  		if(scan == SET){
 8000570:	e7d8      	b.n	8000524 <main+0x40>
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	2000019c 	.word	0x2000019c
 8000578:	20000028 	.word	0x20000028
 800057c:	200001a0 	.word	0x200001a0
 8000580:	200000cc 	.word	0x200000cc
 8000584:	200001a2 	.word	0x200001a2
 8000588:	200001a4 	.word	0x200001a4

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b095      	sub	sp, #84	; 0x54
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	2418      	movs	r4, #24
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	2338      	movs	r3, #56	; 0x38
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f003 f81d 	bl	80035dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	0018      	movs	r0, r3
 80005a6:	2314      	movs	r3, #20
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f003 f816 	bl	80035dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <SystemClock_Config+0x98>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <SystemClock_Config+0x9c>)
 80005b6:	401a      	ands	r2, r3
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <SystemClock_Config+0x98>)
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	0109      	lsls	r1, r1, #4
 80005be:	430a      	orrs	r2, r1
 80005c0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2202      	movs	r2, #2
 80005c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2210      	movs	r2, #16
 80005d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 fb20 	bl	8001c24 <HAL_RCC_OscConfig>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x60>
  {
    Error_Handler();
 80005e8:	f000 f958 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	220f      	movs	r2, #15
 80005f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2201      	movs	r2, #1
 80005f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fecc 	bl	80023ac <HAL_RCC_ClockConfig>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000618:	f000 f940 	bl	800089c <Error_Handler>
  }
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b015      	add	sp, #84	; 0x54
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	40007000 	.word	0x40007000
 8000628:	ffffe7ff 	.word	0xffffe7ff

0800062c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000632:	003b      	movs	r3, r7
 8000634:	0018      	movs	r0, r3
 8000636:	2308      	movs	r3, #8
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f002 ffce 	bl	80035dc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <MX_ADC_Init+0xd8>)
 8000642:	4a31      	ldr	r2, [pc, #196]	; (8000708 <MX_ADC_Init+0xdc>)
 8000644:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000646:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <MX_ADC_Init+0xd8>)
 8000648:	2200      	movs	r2, #0
 800064a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_ADC_Init+0xd8>)
 800064e:	22c0      	movs	r2, #192	; 0xc0
 8000650:	0612      	lsls	r2, r2, #24
 8000652:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <MX_ADC_Init+0xd8>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_ADC_Init+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_ADC_Init+0xd8>)
 8000662:	2201      	movs	r2, #1
 8000664:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <MX_ADC_Init+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_ADC_Init+0xd8>)
 800066e:	2220      	movs	r2, #32
 8000670:	2101      	movs	r1, #1
 8000672:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <MX_ADC_Init+0xd8>)
 8000676:	2221      	movs	r2, #33	; 0x21
 8000678:	2100      	movs	r1, #0
 800067a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_ADC_Init+0xd8>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <MX_ADC_Init+0xd8>)
 8000684:	22c2      	movs	r2, #194	; 0xc2
 8000686:	32ff      	adds	r2, #255	; 0xff
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_ADC_Init+0xd8>)
 800068c:	222c      	movs	r2, #44	; 0x2c
 800068e:	2100      	movs	r1, #0
 8000690:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_ADC_Init+0xd8>)
 8000694:	2204      	movs	r2, #4
 8000696:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_ADC_Init+0xd8>)
 800069a:	2200      	movs	r2, #0
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_ADC_Init+0xd8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_ADC_Init+0xd8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_ADC_Init+0xd8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_ADC_Init+0xd8>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fb08 	bl	8000cc8 <HAL_ADC_Init>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80006bc:	f000 f8ee 	bl	800089c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006c0:	003b      	movs	r3, r7
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006c6:	003b      	movs	r3, r7
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	0152      	lsls	r2, r2, #5
 80006cc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ce:	003a      	movs	r2, r7
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_ADC_Init+0xd8>)
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fd05 	bl	80010e4 <HAL_ADC_ConfigChannel>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006de:	f000 f8dd 	bl	800089c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006e2:	003b      	movs	r3, r7
 80006e4:	4a09      	ldr	r2, [pc, #36]	; (800070c <MX_ADC_Init+0xe0>)
 80006e6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006e8:	003a      	movs	r2, r7
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_ADC_Init+0xd8>)
 80006ec:	0011      	movs	r1, r2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fcf8 	bl	80010e4 <HAL_ADC_ConfigChannel>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80006f8:	f000 f8d0 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b002      	add	sp, #8
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	40012400 	.word	0x40012400
 800070c:	08000004 	.word	0x08000004

08000710 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	2318      	movs	r3, #24
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	0018      	movs	r0, r3
 800071c:	2310      	movs	r3, #16
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f002 ff5b 	bl	80035dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000726:	2310      	movs	r3, #16
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	0018      	movs	r0, r3
 800072c:	2308      	movs	r3, #8
 800072e:	001a      	movs	r2, r3
 8000730:	2100      	movs	r1, #0
 8000732:	f002 ff53 	bl	80035dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000736:	003b      	movs	r3, r7
 8000738:	0018      	movs	r0, r3
 800073a:	2310      	movs	r3, #16
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f002 ff4c 	bl	80035dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000744:	4b35      	ldr	r3, [pc, #212]	; (800081c <MX_TIM2_Init+0x10c>)
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	05d2      	lsls	r2, r2, #23
 800074a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800074c:	4b33      	ldr	r3, [pc, #204]	; (800081c <MX_TIM2_Init+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <MX_TIM2_Init+0x10c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000758:	4b30      	ldr	r3, [pc, #192]	; (800081c <MX_TIM2_Init+0x10c>)
 800075a:	4a31      	ldr	r2, [pc, #196]	; (8000820 <MX_TIM2_Init+0x110>)
 800075c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <MX_TIM2_Init+0x10c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000764:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_TIM2_Init+0x10c>)
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <MX_TIM2_Init+0x10c>)
 800076c:	0018      	movs	r0, r3
 800076e:	f002 f80b 	bl	8002788 <HAL_TIM_Base_Init>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000776:	f000 f891 	bl	800089c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077a:	2118      	movs	r1, #24
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	0152      	lsls	r2, r2, #5
 8000782:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000784:	187a      	adds	r2, r7, r1
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_TIM2_Init+0x10c>)
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f002 fad4 	bl	8002d38 <HAL_TIM_ConfigClockSource>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000794:	f000 f882 	bl	800089c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_TIM2_Init+0x10c>)
 800079a:	0018      	movs	r0, r3
 800079c:	f002 f834 	bl	8002808 <HAL_TIM_PWM_Init>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007a4:	f000 f87a 	bl	800089c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a8:	2110      	movs	r1, #16
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b6:	187a      	adds	r2, r7, r1
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_TIM2_Init+0x10c>)
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fe91 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80007c6:	f000 f869 	bl	800089c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ca:	003b      	movs	r3, r7
 80007cc:	2260      	movs	r2, #96	; 0x60
 80007ce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d6:	003b      	movs	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007dc:	003b      	movs	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e2:	0039      	movs	r1, r7
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_TIM2_Init+0x10c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 f9df 	bl	8002bac <HAL_TIM_PWM_ConfigChannel>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80007f2:	f000 f853 	bl	800089c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007f6:	0039      	movs	r1, r7
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_TIM2_Init+0x10c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	0018      	movs	r0, r3
 80007fe:	f002 f9d5 	bl	8002bac <HAL_TIM_PWM_ConfigChannel>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000806:	f000 f849 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <MX_TIM2_Init+0x10c>)
 800080c:	0018      	movs	r0, r3
 800080e:	f000 f945 	bl	8000a9c <HAL_TIM_MspPostInit>

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b00a      	add	sp, #40	; 0x28
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	200000cc 	.word	0x200000cc
 8000820:	0000ffff 	.word	0x0000ffff

08000824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_DMA_Init+0x48>)
 800082c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_DMA_Init+0x48>)
 8000830:	2101      	movs	r1, #1
 8000832:	430a      	orrs	r2, r1
 8000834:	631a      	str	r2, [r3, #48]	; 0x30
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_DMA_Init+0x48>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	2201      	movs	r2, #1
 800083c:	4013      	ands	r3, r2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2009      	movs	r0, #9
 8000848:	f000 fe8a 	bl	8001560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800084c:	2009      	movs	r0, #9
 800084e:	f000 fe9c 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	200b      	movs	r0, #11
 8000858:	f000 fe82 	bl	8001560 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800085c:	200b      	movs	r0, #11
 800085e:	f000 fe94 	bl	800158a <HAL_NVIC_EnableIRQ>

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40021000 	.word	0x40021000

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_GPIO_Init+0x28>)
 8000878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_GPIO_Init+0x28>)
 800087c:	2101      	movs	r1, #1
 800087e:	430a      	orrs	r2, r1
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_GPIO_Init+0x28>)
 8000884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000886:	2201      	movs	r2, #1
 8000888:	4013      	ands	r3, r2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b002      	add	sp, #8
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40021000 	.word	0x40021000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <HAL_MspInit+0x24>)
 80008ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x24>)
 80008b2:	2101      	movs	r1, #1
 80008b4:	430a      	orrs	r2, r1
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <HAL_MspInit+0x24>)
 80008ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <HAL_MspInit+0x24>)
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	0549      	lsls	r1, r1, #21
 80008c2:	430a      	orrs	r2, r1
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	240c      	movs	r4, #12
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	2314      	movs	r3, #20
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f002 fe7a 	bl	80035dc <memset>
  if(hadc->Instance==ADC1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a2a      	ldr	r2, [pc, #168]	; (8000998 <HAL_ADC_MspInit+0xc8>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d14d      	bne.n	800098e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <HAL_ADC_MspInit+0xcc>)
 80008f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f6:	4b29      	ldr	r3, [pc, #164]	; (800099c <HAL_ADC_MspInit+0xcc>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0089      	lsls	r1, r1, #2
 80008fc:	430a      	orrs	r2, r1
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <HAL_ADC_MspInit+0xcc>)
 8000902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <HAL_ADC_MspInit+0xcc>)
 8000906:	2101      	movs	r1, #1
 8000908:	430a      	orrs	r2, r1
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
 800090c:	4b23      	ldr	r3, [pc, #140]	; (800099c <HAL_ADC_MspInit+0xcc>)
 800090e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000910:	2201      	movs	r2, #1
 8000912:	4013      	ands	r3, r2
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2205      	movs	r2, #5
 800091c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2203      	movs	r2, #3
 8000922:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	193a      	adds	r2, r7, r4
 800092c:	23a0      	movs	r3, #160	; 0xa0
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	0011      	movs	r1, r2
 8000932:	0018      	movs	r0, r3
 8000934:	f001 f800 	bl	8001938 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 800093a:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <HAL_ADC_MspInit+0xd4>)
 800093c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	0052      	lsls	r2, r2, #1
 800095c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	00d2      	lsls	r2, r2, #3
 8000964:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 8000968:	2220      	movs	r2, #32
 800096a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 8000974:	0018      	movs	r0, r3
 8000976:	f000 fe25 	bl	80015c4 <HAL_DMA_Init>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800097e:	f7ff ff8d 	bl	800089c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 8000986:	64da      	str	r2, [r3, #76]	; 0x4c
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_ADC_MspInit+0xd0>)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b009      	add	sp, #36	; 0x24
 8000994:	bd90      	pop	{r4, r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	40012400 	.word	0x40012400
 800099c:	40021000 	.word	0x40021000
 80009a0:	20000084 	.word	0x20000084
 80009a4:	40020008 	.word	0x40020008

080009a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d161      	bne.n	8000a80 <HAL_TIM_Base_MspInit+0xd8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009bc:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <HAL_TIM_Base_MspInit+0xe0>)
 80009be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009c0:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <HAL_TIM_Base_MspInit+0xe0>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	430a      	orrs	r2, r1
 80009c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 80009ca:	4a31      	ldr	r2, [pc, #196]	; (8000a90 <HAL_TIM_Base_MspInit+0xe8>)
 80009cc:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 80009d0:	2208      	movs	r2, #8
 80009d2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d4:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	0052      	lsls	r2, r2, #1
 80009ec:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ee:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	00d2      	lsls	r2, r2, #3
 80009f4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 80009f8:	2220      	movs	r2, #32
 80009fa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 fddd 	bl	80015c4 <HAL_DMA_Init>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 8000a0e:	f7ff ff45 	bl	800089c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 8000a16:	621a      	str	r2, [r3, #32]
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_TIM_Base_MspInit+0xe4>)
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a20:	4a1d      	ldr	r2, [pc, #116]	; (8000a98 <HAL_TIM_Base_MspInit+0xf0>)
 8000a22:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_8;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	00d2      	lsls	r2, r2, #3
 8000a4a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a4e:	2220      	movs	r2, #32
 8000a50:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fdb2 	bl	80015c4 <HAL_DMA_Init>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_TIM_Base_MspInit+0xc0>
    {
      Error_Handler();
 8000a64:	f7ff ff1a 	bl	800089c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_TIM_Base_MspInit+0xec>)
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	2000010c 	.word	0x2000010c
 8000a90:	40020058 	.word	0x40020058
 8000a94:	20000154 	.word	0x20000154
 8000a98:	40020080 	.word	0x40020080

08000a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	240c      	movs	r4, #12
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2314      	movs	r3, #20
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f002 fd94 	bl	80035dc <memset>
  if(htim->Instance==TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d138      	bne.n	8000b32 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <HAL_TIM_MspPostInit+0xa0>)
 8000ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <HAL_TIM_MspPostInit+0xa0>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <HAL_TIM_MspPostInit+0xa0>)
 8000ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2208      	movs	r2, #8
 8000adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2202      	movs	r2, #2
 8000af4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	193a      	adds	r2, r7, r4
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	0011      	movs	r1, r2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 ff1a 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b04:	0021      	movs	r1, r4
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2220      	movs	r2, #32
 8000b0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2202      	movs	r2, #2
 8000b10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2205      	movs	r2, #5
 8000b22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	187a      	adds	r2, r7, r1
 8000b26:	23a0      	movs	r3, #160	; 0xa0
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 ff03 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b009      	add	sp, #36	; 0x24
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f7ff fca0 	bl	80004a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <DMA1_Channel1_IRQHandler+0x14>)
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fe02 	bl	8001780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	20000084 	.word	0x20000084

08000b88 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fdf6 	bl	8001780 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 fdf2 	bl	8001780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	2000010c 	.word	0x2000010c
 8000ba8:	20000154 	.word	0x20000154

08000bac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000be2:	f7ff ffe3 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f002 fcd5 	bl	8003594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fc7b 	bl	80004e4 <main>

08000bee <LoopForever>:

LoopForever:
    b LoopForever
 8000bee:	e7fe      	b.n	8000bee <LoopForever>
   ldr   r0, =_estack
 8000bf0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bfc:	08003630 	.word	0x08003630
  ldr r2, =_sbss
 8000c00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c04:	200001ac 	.word	0x200001ac

08000c08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_COMP_IRQHandler>
	...

08000c0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_Init+0x3c>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_Init+0x3c>)
 8000c1e:	2140      	movs	r1, #64	; 0x40
 8000c20:	430a      	orrs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f811 	bl	8000c4c <HAL_InitTick>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e001      	b.n	8000c3a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c36:	f7ff fe37 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_InitTick+0x5c>)
 8000c56:	681c      	ldr	r4, [r3, #0]
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_InitTick+0x60>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	23fa      	movs	r3, #250	; 0xfa
 8000c60:	0098      	lsls	r0, r3, #2
 8000c62:	f7ff fa51 	bl	8000108 <__udivsi3>
 8000c66:	0003      	movs	r3, r0
 8000c68:	0019      	movs	r1, r3
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	f7ff fa4c 	bl	8000108 <__udivsi3>
 8000c70:	0003      	movs	r3, r0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fc99 	bl	80015aa <HAL_SYSTICK_Config>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e00f      	b.n	8000ca0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d80b      	bhi.n	8000c9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	425b      	negs	r3, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 fc66 	bl	8001560 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_InitTick+0x64>)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b003      	add	sp, #12
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b02      	ldr	r3, [pc, #8]	; (8000cc4 <HAL_GetTick+0x10>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	200001a8 	.word	0x200001a8

08000cc8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e159      	b.n	8000f8e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10a      	bne.n	8000cf8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2250      	movs	r2, #80	; 0x50
 8000cec:	2100      	movs	r1, #0
 8000cee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fdec 	bl	80008d0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cfc:	2210      	movs	r2, #16
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b10      	cmp	r3, #16
 8000d02:	d005      	beq.n	8000d10 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d0e:	d00b      	beq.n	8000d28 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d14:	2210      	movs	r2, #16
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2250      	movs	r2, #80	; 0x50
 8000d20:	2100      	movs	r1, #0
 8000d22:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e132      	b.n	8000f8e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2c:	4a9a      	ldr	r2, [pc, #616]	; (8000f98 <HAL_ADC_Init+0x2d0>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2202      	movs	r2, #2
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2203      	movs	r2, #3
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d108      	bne.n	8000d58 <HAL_ADC_Init+0x90>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d101      	bne.n	8000d58 <HAL_ADC_Init+0x90>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <HAL_ADC_Init+0x92>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d149      	bne.n	8000df2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	23c0      	movs	r3, #192	; 0xc0
 8000d64:	061b      	lsls	r3, r3, #24
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d00b      	beq.n	8000d82 <HAL_ADC_Init+0xba>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d005      	beq.n	8000d82 <HAL_ADC_Init+0xba>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	061b      	lsls	r3, r3, #24
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d111      	bne.n	8000da6 <HAL_ADC_Init+0xde>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	0892      	lsrs	r2, r2, #2
 8000d90:	611a      	str	r2, [r3, #16]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6919      	ldr	r1, [r3, #16]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	e014      	b.n	8000dd0 <HAL_ADC_Init+0x108>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	0892      	lsrs	r2, r2, #2
 8000db4:	611a      	str	r2, [r3, #16]
 8000db6:	4b79      	ldr	r3, [pc, #484]	; (8000f9c <HAL_ADC_Init+0x2d4>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b78      	ldr	r3, [pc, #480]	; (8000f9c <HAL_ADC_Init+0x2d4>)
 8000dbc:	4978      	ldr	r1, [pc, #480]	; (8000fa0 <HAL_ADC_Init+0x2d8>)
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	4b76      	ldr	r3, [pc, #472]	; (8000f9c <HAL_ADC_Init+0x2d4>)
 8000dc4:	6819      	ldr	r1, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	4b74      	ldr	r3, [pc, #464]	; (8000f9c <HAL_ADC_Init+0x2d4>)
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2118      	movs	r1, #24
 8000ddc:	438a      	bics	r2, r1
 8000dde:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68d9      	ldr	r1, [r3, #12]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <HAL_ADC_Init+0x2d4>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b69      	ldr	r3, [pc, #420]	; (8000f9c <HAL_ADC_Init+0x2d4>)
 8000df8:	496a      	ldr	r1, [pc, #424]	; (8000fa4 <HAL_ADC_Init+0x2dc>)
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000dfe:	4b67      	ldr	r3, [pc, #412]	; (8000f9c <HAL_ADC_Init+0x2d4>)
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e06:	065a      	lsls	r2, r3, #25
 8000e08:	4b64      	ldr	r3, [pc, #400]	; (8000f9c <HAL_ADC_Init+0x2d4>)
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	055b      	lsls	r3, r3, #21
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d108      	bne.n	8000e2e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	0549      	lsls	r1, r1, #21
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	495b      	ldr	r1, [pc, #364]	; (8000fa8 <HAL_ADC_Init+0x2e0>)
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68d9      	ldr	r1, [r3, #12]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d101      	bne.n	8000e54 <HAL_ADC_Init+0x18c>
 8000e50:	2304      	movs	r3, #4
 8000e52:	e000      	b.n	8000e56 <HAL_ADC_Init+0x18e>
 8000e54:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e56:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2020      	movs	r0, #32
 8000e5c:	5c1b      	ldrb	r3, [r3, r0]
 8000e5e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e60:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	202c      	movs	r0, #44	; 0x2c
 8000e66:	5c1b      	ldrb	r3, [r3, r0]
 8000e68:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e6a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e70:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000e78:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e80:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e8e:	23c2      	movs	r3, #194	; 0xc2
 8000e90:	33ff      	adds	r3, #255	; 0xff
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d00b      	beq.n	8000eae <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68d9      	ldr	r1, [r3, #12]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2221      	movs	r2, #33	; 0x21
 8000eb2:	5c9b      	ldrb	r3, [r3, r2]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d11a      	bne.n	8000eee <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2220      	movs	r2, #32
 8000ebc:	5c9b      	ldrb	r3, [r3, r2]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d109      	bne.n	8000ed6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0249      	lsls	r1, r1, #9
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	e00b      	b.n	8000eee <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eda:	2220      	movs	r2, #32
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d11f      	bne.n	8000f36 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	492a      	ldr	r1, [pc, #168]	; (8000fac <HAL_ADC_Init+0x2e4>)
 8000f02:	400a      	ands	r2, r1
 8000f04:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6919      	ldr	r1, [r3, #16]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f14:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000f1a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	e00e      	b.n	8000f54 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d107      	bne.n	8000f54 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2101      	movs	r1, #1
 8000f50:	438a      	bics	r2, r1
 8000f52:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2107      	movs	r1, #7
 8000f60:	438a      	bics	r2, r1
 8000f62:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6959      	ldr	r1, [r3, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f80:	2203      	movs	r2, #3
 8000f82:	4393      	bics	r3, r2
 8000f84:	2201      	movs	r2, #1
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	fffffefd 	.word	0xfffffefd
 8000f9c:	40012708 	.word	0x40012708
 8000fa0:	ffc3ffff 	.word	0xffc3ffff
 8000fa4:	fdffffff 	.word	0xfdffffff
 8000fa8:	fffe0219 	.word	0xfffe0219
 8000fac:	fffffc03 	.word	0xfffffc03

08000fb0 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fbc:	2317      	movs	r3, #23
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d15e      	bne.n	800108e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2250      	movs	r2, #80	; 0x50
 8000fd4:	5c9b      	ldrb	r3, [r3, r2]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_Start_DMA+0x2e>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e05e      	b.n	800109c <HAL_ADC_Start_DMA+0xec>
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2250      	movs	r2, #80	; 0x50
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d007      	beq.n	800100e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000ffe:	2317      	movs	r3, #23
 8001000:	18fc      	adds	r4, r7, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	0018      	movs	r0, r3
 8001006:	f000 f8f3 	bl	80011f0 <ADC_Enable>
 800100a:	0003      	movs	r3, r0
 800100c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800100e:	2317      	movs	r3, #23
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d13e      	bne.n	8001096 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101c:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <HAL_ADC_Start_DMA+0xf4>)
 800101e:	4013      	ands	r3, r2
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	0052      	lsls	r2, r2, #1
 8001024:	431a      	orrs	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2250      	movs	r2, #80	; 0x50
 8001034:	2100      	movs	r1, #0
 8001036:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <HAL_ADC_Start_DMA+0xf8>)
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	4a19      	ldr	r2, [pc, #100]	; (80010ac <HAL_ADC_Start_DMA+0xfc>)
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104c:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <HAL_ADC_Start_DMA+0x100>)
 800104e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	221c      	movs	r2, #28
 8001056:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2110      	movs	r1, #16
 8001064:	430a      	orrs	r2, r1
 8001066:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3340      	adds	r3, #64	; 0x40
 8001072:	0019      	movs	r1, r3
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f000 fb1c 	bl	80016b4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2104      	movs	r1, #4
 8001088:	430a      	orrs	r2, r1
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	e003      	b.n	8001096 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800108e:	2317      	movs	r3, #23
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	2202      	movs	r2, #2
 8001094:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001096:	2317      	movs	r3, #23
 8001098:	18fb      	adds	r3, r7, r3
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b007      	add	sp, #28
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	fffff0fe 	.word	0xfffff0fe
 80010a8:	080012c1 	.word	0x080012c1
 80010ac:	08001375 	.word	0x08001375
 80010b0:	08001393 	.word	0x08001393

080010b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2250      	movs	r2, #80	; 0x50
 80010f2:	5c9b      	ldrb	r3, [r3, r2]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x18>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e06c      	b.n	80011d6 <HAL_ADC_ConfigChannel+0xf2>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2250      	movs	r2, #80	; 0x50
 8001100:	2101      	movs	r1, #1
 8001102:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2204      	movs	r2, #4
 800110c:	4013      	ands	r3, r2
 800110e:	d00b      	beq.n	8001128 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001114:	2220      	movs	r2, #32
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2250      	movs	r2, #80	; 0x50
 8001120:	2100      	movs	r1, #0
 8001122:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e056      	b.n	80011d6 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4a2c      	ldr	r2, [pc, #176]	; (80011e0 <HAL_ADC_ConfigChannel+0xfc>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d028      	beq.n	8001184 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	035b      	lsls	r3, r3, #13
 800113e:	0b5a      	lsrs	r2, r3, #13
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	02db      	lsls	r3, r3, #11
 8001150:	4013      	ands	r3, r2
 8001152:	d009      	beq.n	8001168 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_ADC_ConfigChannel+0x100>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_ADC_ConfigChannel+0x100>)
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	0409      	lsls	r1, r1, #16
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001162:	200a      	movs	r0, #10
 8001164:	f000 f930 	bl	80013c8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	029b      	lsls	r3, r3, #10
 8001170:	4013      	ands	r3, r2
 8001172:	d02b      	beq.n	80011cc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_ADC_ConfigChannel+0x100>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <HAL_ADC_ConfigChannel+0x100>)
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	03c9      	lsls	r1, r1, #15
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e023      	b.n	80011cc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	035b      	lsls	r3, r3, #13
 8001190:	0b5b      	lsrs	r3, r3, #13
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	400a      	ands	r2, r1
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	02db      	lsls	r3, r3, #11
 80011a4:	4013      	ands	r3, r2
 80011a6:	d005      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_ADC_ConfigChannel+0x100>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <HAL_ADC_ConfigChannel+0x100>)
 80011ae:	490e      	ldr	r1, [pc, #56]	; (80011e8 <HAL_ADC_ConfigChannel+0x104>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	029b      	lsls	r3, r3, #10
 80011bc:	4013      	ands	r3, r2
 80011be:	d005      	beq.n	80011cc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_ADC_ConfigChannel+0x100>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <HAL_ADC_ConfigChannel+0x100>)
 80011c6:	4909      	ldr	r1, [pc, #36]	; (80011ec <HAL_ADC_ConfigChannel+0x108>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2250      	movs	r2, #80	; 0x50
 80011d0:	2100      	movs	r1, #0
 80011d2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	00001001 	.word	0x00001001
 80011e4:	40012708 	.word	0x40012708
 80011e8:	ff7fffff 	.word	0xff7fffff
 80011ec:	ffbfffff 	.word	0xffbfffff

080011f0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2203      	movs	r2, #3
 8001204:	4013      	ands	r3, r2
 8001206:	2b01      	cmp	r3, #1
 8001208:	d108      	bne.n	800121c <ADC_Enable+0x2c>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2201      	movs	r2, #1
 8001212:	4013      	ands	r3, r2
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <ADC_Enable+0x2c>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <ADC_Enable+0x2e>
 800121c:	2300      	movs	r3, #0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d146      	bne.n	80012b0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a24      	ldr	r2, [pc, #144]	; (80012bc <ADC_Enable+0xcc>)
 800122a:	4013      	ands	r3, r2
 800122c:	d00d      	beq.n	800124a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	2210      	movs	r2, #16
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	2201      	movs	r2, #1
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e033      	b.n	80012b2 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2101      	movs	r1, #1
 8001256:	430a      	orrs	r2, r1
 8001258:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 f8b4 	bl	80013c8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001260:	f7ff fd28 	bl	8000cb4 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001268:	e01b      	b.n	80012a2 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800126a:	f7ff fd23 	bl	8000cb4 <HAL_GetTick>
 800126e:	0002      	movs	r2, r0
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b0a      	cmp	r3, #10
 8001276:	d914      	bls.n	80012a2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	4013      	ands	r3, r2
 8001282:	2b01      	cmp	r3, #1
 8001284:	d00d      	beq.n	80012a2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128a:	2210      	movs	r2, #16
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	2201      	movs	r2, #1
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e007      	b.n	80012b2 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d1dc      	bne.n	800126a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	80000017 	.word	0x80000017

080012c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d2:	2250      	movs	r2, #80	; 0x50
 80012d4:	4013      	ands	r3, r2
 80012d6:	d141      	bne.n	800135c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	431a      	orrs	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	23c0      	movs	r3, #192	; 0xc0
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4013      	ands	r3, r2
 80012f2:	d12e      	bne.n	8001352 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2220      	movs	r2, #32
 80012f8:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d129      	bne.n	8001352 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2208      	movs	r2, #8
 8001306:	4013      	ands	r3, r2
 8001308:	2b08      	cmp	r3, #8
 800130a:	d122      	bne.n	8001352 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2204      	movs	r2, #4
 8001314:	4013      	ands	r3, r2
 8001316:	d110      	bne.n	800133a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	210c      	movs	r1, #12
 8001324:	438a      	bics	r2, r1
 8001326:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132c:	4a10      	ldr	r2, [pc, #64]	; (8001370 <ADC_DMAConvCplt+0xb0>)
 800132e:	4013      	ands	r3, r2
 8001330:	2201      	movs	r2, #1
 8001332:	431a      	orrs	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	655a      	str	r2, [r3, #84]	; 0x54
 8001338:	e00b      	b.n	8001352 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133e:	2220      	movs	r2, #32
 8001340:	431a      	orrs	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	2201      	movs	r2, #1
 800134c:	431a      	orrs	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	0018      	movs	r0, r3
 8001356:	f7ff fead 	bl	80010b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800135a:	e005      	b.n	8001368 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	0010      	movs	r0, r2
 8001366:	4798      	blx	r3
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b004      	add	sp, #16
 800136e:	bd80      	pop	{r7, pc}
 8001370:	fffffefe 	.word	0xfffffefe

08001374 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff fe9d 	bl	80010c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}

08001392 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a4:	2240      	movs	r2, #64	; 0x40
 80013a6:	431a      	orrs	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	2204      	movs	r2, #4
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff fe8a 	bl	80010d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b004      	add	sp, #16
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <ADC_DelayMicroSecond+0x38>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	490b      	ldr	r1, [pc, #44]	; (8001404 <ADC_DelayMicroSecond+0x3c>)
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7fe fe96 	bl	8000108 <__udivsi3>
 80013dc:	0003      	movs	r3, r0
 80013de:	001a      	movs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4353      	muls	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80013e6:	e002      	b.n	80013ee <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f9      	bne.n	80013e8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b004      	add	sp, #16
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	20000000 	.word	0x20000000
 8001404:	000f4240 	.word	0x000f4240

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	0002      	movs	r2, r0
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001414:	1dfb      	adds	r3, r7, #7
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b7f      	cmp	r3, #127	; 0x7f
 800141a:	d809      	bhi.n	8001430 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141c:	1dfb      	adds	r3, r7, #7
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	001a      	movs	r2, r3
 8001422:	231f      	movs	r3, #31
 8001424:	401a      	ands	r2, r3
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__NVIC_EnableIRQ+0x30>)
 8001428:	2101      	movs	r1, #1
 800142a:	4091      	lsls	r1, r2
 800142c:	000a      	movs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
  }
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	0002      	movs	r2, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b7f      	cmp	r3, #127	; 0x7f
 8001450:	d828      	bhi.n	80014a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001452:	4a2f      	ldr	r2, [pc, #188]	; (8001510 <__NVIC_SetPriority+0xd4>)
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b25b      	sxtb	r3, r3
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	33c0      	adds	r3, #192	; 0xc0
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	589b      	ldr	r3, [r3, r2]
 8001462:	1dfa      	adds	r2, r7, #7
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	0011      	movs	r1, r2
 8001468:	2203      	movs	r2, #3
 800146a:	400a      	ands	r2, r1
 800146c:	00d2      	lsls	r2, r2, #3
 800146e:	21ff      	movs	r1, #255	; 0xff
 8001470:	4091      	lsls	r1, r2
 8001472:	000a      	movs	r2, r1
 8001474:	43d2      	mvns	r2, r2
 8001476:	401a      	ands	r2, r3
 8001478:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	019b      	lsls	r3, r3, #6
 800147e:	22ff      	movs	r2, #255	; 0xff
 8001480:	401a      	ands	r2, r3
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	0018      	movs	r0, r3
 8001488:	2303      	movs	r3, #3
 800148a:	4003      	ands	r3, r0
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001490:	481f      	ldr	r0, [pc, #124]	; (8001510 <__NVIC_SetPriority+0xd4>)
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b25b      	sxtb	r3, r3
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	430a      	orrs	r2, r1
 800149c:	33c0      	adds	r3, #192	; 0xc0
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014a2:	e031      	b.n	8001508 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a4:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <__NVIC_SetPriority+0xd8>)
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	0019      	movs	r1, r3
 80014ac:	230f      	movs	r3, #15
 80014ae:	400b      	ands	r3, r1
 80014b0:	3b08      	subs	r3, #8
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3306      	adds	r3, #6
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	18d3      	adds	r3, r2, r3
 80014ba:	3304      	adds	r3, #4
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	1dfa      	adds	r2, r7, #7
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	0011      	movs	r1, r2
 80014c4:	2203      	movs	r2, #3
 80014c6:	400a      	ands	r2, r1
 80014c8:	00d2      	lsls	r2, r2, #3
 80014ca:	21ff      	movs	r1, #255	; 0xff
 80014cc:	4091      	lsls	r1, r2
 80014ce:	000a      	movs	r2, r1
 80014d0:	43d2      	mvns	r2, r2
 80014d2:	401a      	ands	r2, r3
 80014d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	22ff      	movs	r2, #255	; 0xff
 80014dc:	401a      	ands	r2, r3
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0018      	movs	r0, r3
 80014e4:	2303      	movs	r3, #3
 80014e6:	4003      	ands	r3, r0
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ec:	4809      	ldr	r0, [pc, #36]	; (8001514 <__NVIC_SetPriority+0xd8>)
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	001c      	movs	r4, r3
 80014f4:	230f      	movs	r3, #15
 80014f6:	4023      	ands	r3, r4
 80014f8:	3b08      	subs	r3, #8
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	430a      	orrs	r2, r1
 80014fe:	3306      	adds	r3, #6
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	18c3      	adds	r3, r0, r3
 8001504:	3304      	adds	r3, #4
 8001506:	601a      	str	r2, [r3, #0]
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b003      	add	sp, #12
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1e5a      	subs	r2, r3, #1
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	045b      	lsls	r3, r3, #17
 8001528:	429a      	cmp	r2, r3
 800152a:	d301      	bcc.n	8001530 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152c:	2301      	movs	r3, #1
 800152e:	e010      	b.n	8001552 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <SysTick_Config+0x44>)
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	3a01      	subs	r2, #1
 8001536:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001538:	2301      	movs	r3, #1
 800153a:	425b      	negs	r3, r3
 800153c:	2103      	movs	r1, #3
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff ff7c 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x44>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x44>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	210f      	movs	r1, #15
 800156c:	187b      	adds	r3, r7, r1
 800156e:	1c02      	adds	r2, r0, #0
 8001570:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	187b      	adds	r3, r7, r1
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b25b      	sxtb	r3, r3
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b004      	add	sp, #16
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	0002      	movs	r2, r0
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b25b      	sxtb	r3, r3
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff ff33 	bl	8001408 <__NVIC_EnableIRQ>
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff ffaf 	bl	8001518 <SysTick_Config>
 80015ba:	0003      	movs	r3, r0
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e061      	b.n	800169a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a32      	ldr	r2, [pc, #200]	; (80016a4 <HAL_DMA_Init+0xe0>)
 80015dc:	4694      	mov	ip, r2
 80015de:	4463      	add	r3, ip
 80015e0:	2114      	movs	r1, #20
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7fe fd90 	bl	8000108 <__udivsi3>
 80015e8:	0003      	movs	r3, r0
 80015ea:	009a      	lsls	r2, r3, #2
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <HAL_DMA_Init+0xe4>)
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2225      	movs	r2, #37	; 0x25
 80015fa:	2102      	movs	r1, #2
 80015fc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a28      	ldr	r2, [pc, #160]	; (80016ac <HAL_DMA_Init+0xe8>)
 800160a:	4013      	ands	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001616:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	01db      	lsls	r3, r3, #7
 800164c:	429a      	cmp	r2, r3
 800164e:	d018      	beq.n	8001682 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_DMA_Init+0xec>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	211c      	movs	r1, #28
 800165a:	400b      	ands	r3, r1
 800165c:	210f      	movs	r1, #15
 800165e:	4099      	lsls	r1, r3
 8001660:	000b      	movs	r3, r1
 8001662:	43d9      	mvns	r1, r3
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_DMA_Init+0xec>)
 8001666:	400a      	ands	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_DMA_Init+0xec>)
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	201c      	movs	r0, #28
 8001678:	4003      	ands	r3, r0
 800167a:	409a      	lsls	r2, r3
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_DMA_Init+0xec>)
 800167e:	430a      	orrs	r2, r1
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2225      	movs	r2, #37	; 0x25
 800168c:	2101      	movs	r1, #1
 800168e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2224      	movs	r2, #36	; 0x24
 8001694:	2100      	movs	r1, #0
 8001696:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b004      	add	sp, #16
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	bffdfff8 	.word	0xbffdfff8
 80016a8:	40020000 	.word	0x40020000
 80016ac:	ffff800f 	.word	0xffff800f
 80016b0:	400200a8 	.word	0x400200a8

080016b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016c2:	2317      	movs	r3, #23
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2224      	movs	r2, #36	; 0x24
 80016ce:	5c9b      	ldrb	r3, [r3, r2]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_DMA_Start_IT+0x24>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e04f      	b.n	8001778 <HAL_DMA_Start_IT+0xc4>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2224      	movs	r2, #36	; 0x24
 80016dc:	2101      	movs	r1, #1
 80016de:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2225      	movs	r2, #37	; 0x25
 80016e4:	5c9b      	ldrb	r3, [r3, r2]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d13a      	bne.n	8001762 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2225      	movs	r2, #37	; 0x25
 80016f0:	2102      	movs	r1, #2
 80016f2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	438a      	bics	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 f8e3 	bl	80018dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	210e      	movs	r1, #14
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e00f      	b.n	8001750 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2104      	movs	r1, #4
 800173c:	438a      	bics	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	210a      	movs	r1, #10
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2101      	movs	r1, #1
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e007      	b.n	8001772 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2224      	movs	r2, #36	; 0x24
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800176a:	2317      	movs	r3, #23
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	2202      	movs	r2, #2
 8001770:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001772:	2317      	movs	r3, #23
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	781b      	ldrb	r3, [r3, #0]
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b006      	add	sp, #24
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	221c      	movs	r2, #28
 800179e:	4013      	ands	r3, r2
 80017a0:	2204      	movs	r2, #4
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	d026      	beq.n	80017fa <HAL_DMA_IRQHandler+0x7a>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2204      	movs	r2, #4
 80017b0:	4013      	ands	r3, r2
 80017b2:	d022      	beq.n	80017fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2220      	movs	r2, #32
 80017bc:	4013      	ands	r3, r2
 80017be:	d107      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2104      	movs	r1, #4
 80017cc:	438a      	bics	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	221c      	movs	r2, #28
 80017d6:	401a      	ands	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2104      	movs	r1, #4
 80017de:	4091      	lsls	r1, r2
 80017e0:	000a      	movs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d100      	bne.n	80017ee <HAL_DMA_IRQHandler+0x6e>
 80017ec:	e071      	b.n	80018d2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	0010      	movs	r0, r2
 80017f6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80017f8:	e06b      	b.n	80018d2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	221c      	movs	r2, #28
 8001800:	4013      	ands	r3, r2
 8001802:	2202      	movs	r2, #2
 8001804:	409a      	lsls	r2, r3
 8001806:	0013      	movs	r3, r2
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4013      	ands	r3, r2
 800180c:	d02d      	beq.n	800186a <HAL_DMA_IRQHandler+0xea>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d029      	beq.n	800186a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2220      	movs	r2, #32
 800181e:	4013      	ands	r3, r2
 8001820:	d10b      	bne.n	800183a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	210a      	movs	r1, #10
 800182e:	438a      	bics	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2225      	movs	r2, #37	; 0x25
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	221c      	movs	r2, #28
 8001840:	401a      	ands	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	2102      	movs	r1, #2
 8001848:	4091      	lsls	r1, r2
 800184a:	000a      	movs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2224      	movs	r2, #36	; 0x24
 8001852:	2100      	movs	r1, #0
 8001854:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d039      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	0010      	movs	r0, r2
 8001866:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001868:	e033      	b.n	80018d2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	221c      	movs	r2, #28
 8001870:	4013      	ands	r3, r2
 8001872:	2208      	movs	r2, #8
 8001874:	409a      	lsls	r2, r3
 8001876:	0013      	movs	r3, r2
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	d02a      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x154>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2208      	movs	r2, #8
 8001882:	4013      	ands	r3, r2
 8001884:	d026      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	210e      	movs	r1, #14
 8001892:	438a      	bics	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	221c      	movs	r2, #28
 800189c:	401a      	ands	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	2101      	movs	r1, #1
 80018a4:	4091      	lsls	r1, r2
 80018a6:	000a      	movs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2225      	movs	r2, #37	; 0x25
 80018b4:	2101      	movs	r1, #1
 80018b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2224      	movs	r2, #36	; 0x24
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	0010      	movs	r0, r2
 80018d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46c0      	nop			; (mov r8, r8)
}
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b004      	add	sp, #16
 80018da:	bd80      	pop	{r7, pc}

080018dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	221c      	movs	r2, #28
 80018f0:	401a      	ands	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	2101      	movs	r1, #1
 80018f8:	4091      	lsls	r1, r2
 80018fa:	000a      	movs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b10      	cmp	r3, #16
 800190c:	d108      	bne.n	8001920 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800191e:	e007      	b.n	8001930 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b004      	add	sp, #16
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800194e:	e14f      	b.n	8001bf0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d100      	bne.n	8001968 <HAL_GPIO_Init+0x30>
 8001966:	e140      	b.n	8001bea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	4013      	ands	r3, r2
 8001970:	2b01      	cmp	r3, #1
 8001972:	d005      	beq.n	8001980 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2203      	movs	r2, #3
 800197a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800197c:	2b02      	cmp	r3, #2
 800197e:	d130      	bne.n	80019e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	409a      	lsls	r2, r3
 800198e:	0013      	movs	r3, r2
 8001990:	43da      	mvns	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	409a      	lsls	r2, r3
 80019a2:	0013      	movs	r3, r2
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b6:	2201      	movs	r2, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	43da      	mvns	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	2201      	movs	r2, #1
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
 80019d4:	0013      	movs	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2203      	movs	r2, #3
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d017      	beq.n	8001a1e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	409a      	lsls	r2, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	43da      	mvns	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	0013      	movs	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2203      	movs	r2, #3
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d123      	bne.n	8001a72 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	58d3      	ldr	r3, [r2, r3]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	43da      	mvns	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2107      	movs	r1, #7
 8001a56:	400b      	ands	r3, r1
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	6939      	ldr	r1, [r7, #16]
 8001a70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	401a      	ands	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	23c0      	movs	r3, #192	; 0xc0
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d100      	bne.n	8001ab4 <HAL_GPIO_Init+0x17c>
 8001ab2:	e09a      	b.n	8001bea <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab4:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001aba:	2101      	movs	r1, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac0:	4a52      	ldr	r2, [pc, #328]	; (8001c0c <HAL_GPIO_Init+0x2d4>)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	589b      	ldr	r3, [r3, r2]
 8001acc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	0013      	movs	r3, r2
 8001adc:	43da      	mvns	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	23a0      	movs	r3, #160	; 0xa0
 8001ae8:	05db      	lsls	r3, r3, #23
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d019      	beq.n	8001b22 <HAL_GPIO_Init+0x1ea>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a47      	ldr	r2, [pc, #284]	; (8001c10 <HAL_GPIO_Init+0x2d8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0x1e6>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a46      	ldr	r2, [pc, #280]	; (8001c14 <HAL_GPIO_Init+0x2dc>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00d      	beq.n	8001b1a <HAL_GPIO_Init+0x1e2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a45      	ldr	r2, [pc, #276]	; (8001c18 <HAL_GPIO_Init+0x2e0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <HAL_GPIO_Init+0x1de>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a44      	ldr	r2, [pc, #272]	; (8001c1c <HAL_GPIO_Init+0x2e4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_GPIO_Init+0x1da>
 8001b0e:	2305      	movs	r3, #5
 8001b10:	e008      	b.n	8001b24 <HAL_GPIO_Init+0x1ec>
 8001b12:	2306      	movs	r3, #6
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x1ec>
 8001b16:	2303      	movs	r3, #3
 8001b18:	e004      	b.n	8001b24 <HAL_GPIO_Init+0x1ec>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e002      	b.n	8001b24 <HAL_GPIO_Init+0x1ec>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x1ec>
 8001b22:	2300      	movs	r3, #0
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	2103      	movs	r1, #3
 8001b28:	400a      	ands	r2, r1
 8001b2a:	0092      	lsls	r2, r2, #2
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b34:	4935      	ldr	r1, [pc, #212]	; (8001c0c <HAL_GPIO_Init+0x2d4>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	025b      	lsls	r3, r3, #9
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43da      	mvns	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	4013      	ands	r3, r2
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	035b      	lsls	r3, r3, #13
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43da      	mvns	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	039b      	lsls	r3, r3, #14
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	40da      	lsrs	r2, r3
 8001bf8:	1e13      	subs	r3, r2, #0
 8001bfa:	d000      	beq.n	8001bfe <HAL_GPIO_Init+0x2c6>
 8001bfc:	e6a8      	b.n	8001950 <HAL_GPIO_Init+0x18>
  }
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b006      	add	sp, #24
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	50000400 	.word	0x50000400
 8001c14:	50000800 	.word	0x50000800
 8001c18:	50000c00 	.word	0x50000c00
 8001c1c:	50001c00 	.word	0x50001c00
 8001c20:	40010400 	.word	0x40010400

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f000 fbaf 	bl	8002396 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c38:	4bcf      	ldr	r3, [pc, #828]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	220c      	movs	r2, #12
 8001c3e:	4013      	ands	r3, r2
 8001c40:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c42:	4bcd      	ldr	r3, [pc, #820]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2201      	movs	r2, #1
 8001c54:	4013      	ands	r3, r2
 8001c56:	d100      	bne.n	8001c5a <HAL_RCC_OscConfig+0x36>
 8001c58:	e07e      	b.n	8001d58 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d007      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d112      	bne.n	8001c8c <HAL_RCC_OscConfig+0x68>
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	025b      	lsls	r3, r3, #9
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d10d      	bne.n	8001c8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	4bc1      	ldr	r3, [pc, #772]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	029b      	lsls	r3, r3, #10
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d100      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5a>
 8001c7c:	e06b      	b.n	8001d56 <HAL_RCC_OscConfig+0x132>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d167      	bne.n	8001d56 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f000 fb85 	bl	8002396 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	025b      	lsls	r3, r3, #9
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x84>
 8001c98:	4bb7      	ldr	r3, [pc, #732]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4bb6      	ldr	r3, [pc, #728]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001c9e:	2180      	movs	r1, #128	; 0x80
 8001ca0:	0249      	lsls	r1, r1, #9
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e027      	b.n	8001cf8 <HAL_RCC_OscConfig+0xd4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	23a0      	movs	r3, #160	; 0xa0
 8001cae:	02db      	lsls	r3, r3, #11
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10e      	bne.n	8001cd2 <HAL_RCC_OscConfig+0xae>
 8001cb4:	4bb0      	ldr	r3, [pc, #704]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4baf      	ldr	r3, [pc, #700]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	02c9      	lsls	r1, r1, #11
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	4bad      	ldr	r3, [pc, #692]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4bac      	ldr	r3, [pc, #688]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	0249      	lsls	r1, r1, #9
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e012      	b.n	8001cf8 <HAL_RCC_OscConfig+0xd4>
 8001cd2:	4ba9      	ldr	r3, [pc, #676]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4ba8      	ldr	r3, [pc, #672]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001cd8:	49a8      	ldr	r1, [pc, #672]	; (8001f7c <HAL_RCC_OscConfig+0x358>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	4ba6      	ldr	r3, [pc, #664]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	025b      	lsls	r3, r3, #9
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4ba2      	ldr	r3, [pc, #648]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4ba1      	ldr	r3, [pc, #644]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001cf2:	49a3      	ldr	r1, [pc, #652]	; (8001f80 <HAL_RCC_OscConfig+0x35c>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d015      	beq.n	8001d2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7fe ffd8 	bl	8000cb4 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0a:	f7fe ffd3 	bl	8000cb4 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	; 0x64
 8001d16:	d902      	bls.n	8001d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	f000 fb3c 	bl	8002396 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d1e:	4b96      	ldr	r3, [pc, #600]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	029b      	lsls	r3, r3, #10
 8001d26:	4013      	ands	r3, r2
 8001d28:	d0ef      	beq.n	8001d0a <HAL_RCC_OscConfig+0xe6>
 8001d2a:	e015      	b.n	8001d58 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7fe ffc2 	bl	8000cb4 <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d36:	f7fe ffbd 	bl	8000cb4 <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b64      	cmp	r3, #100	; 0x64
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e326      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d48:	4b8b      	ldr	r3, [pc, #556]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	4013      	ands	r3, r2
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x112>
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d100      	bne.n	8001d64 <HAL_RCC_OscConfig+0x140>
 8001d62:	e08b      	b.n	8001e7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d13e      	bne.n	8001df4 <HAL_RCC_OscConfig+0x1d0>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d13b      	bne.n	8001df4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d7c:	4b7e      	ldr	r3, [pc, #504]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2204      	movs	r2, #4
 8001d82:	4013      	ands	r3, r2
 8001d84:	d004      	beq.n	8001d90 <HAL_RCC_OscConfig+0x16c>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e302      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b79      	ldr	r3, [pc, #484]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a7b      	ldr	r2, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x360>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	021a      	lsls	r2, r3, #8
 8001da0:	4b75      	ldr	r3, [pc, #468]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001da6:	4b74      	ldr	r3, [pc, #464]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2209      	movs	r2, #9
 8001dac:	4393      	bics	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001db8:	f000 fc40 	bl	800263c <HAL_RCC_GetSysClockFreq>
 8001dbc:	0001      	movs	r1, r0
 8001dbe:	4b6e      	ldr	r3, [pc, #440]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	4a6f      	ldr	r2, [pc, #444]	; (8001f88 <HAL_RCC_OscConfig+0x364>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	000a      	movs	r2, r1
 8001dce:	40da      	lsrs	r2, r3
 8001dd0:	4b6e      	ldr	r3, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x368>)
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001dd4:	4b6e      	ldr	r3, [pc, #440]	; (8001f90 <HAL_RCC_OscConfig+0x36c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2513      	movs	r5, #19
 8001dda:	197c      	adds	r4, r7, r5
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7fe ff35 	bl	8000c4c <HAL_InitTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001de6:	197b      	adds	r3, r7, r5
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d046      	beq.n	8001e7c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001dee:	197b      	adds	r3, r7, r5
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	e2d0      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d027      	beq.n	8001e4a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dfa:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2209      	movs	r2, #9
 8001e00:	4393      	bics	r3, r2
 8001e02:	0019      	movs	r1, r3
 8001e04:	4b5c      	ldr	r3, [pc, #368]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff52 	bl	8000cb4 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7fe ff4d 	bl	8000cb4 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e2b6      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d0f1      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4a53      	ldr	r2, [pc, #332]	; (8001f84 <HAL_RCC_OscConfig+0x360>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	021a      	lsls	r2, r3, #8
 8001e42:	4b4d      	ldr	r3, [pc, #308]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	e018      	b.n	8001e7c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001e50:	2101      	movs	r1, #1
 8001e52:	438a      	bics	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7fe ff2d 	bl	8000cb4 <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e60:	f7fe ff28 	bl	8000cb4 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e291      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2204      	movs	r2, #4
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d1f1      	bne.n	8001e60 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2210      	movs	r2, #16
 8001e82:	4013      	ands	r3, r2
 8001e84:	d100      	bne.n	8001e88 <HAL_RCC_OscConfig+0x264>
 8001e86:	e0a1      	b.n	8001fcc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d140      	bne.n	8001f10 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d005      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x282>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e277      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea6:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a3a      	ldr	r2, [pc, #232]	; (8001f94 <HAL_RCC_OscConfig+0x370>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb4:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eba:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	0a19      	lsrs	r1, r3, #8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	061a      	lsls	r2, r3, #24
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	0b5b      	lsrs	r3, r3, #13
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	0212      	lsls	r2, r2, #8
 8001eda:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	4928      	ldr	r1, [pc, #160]	; (8001f88 <HAL_RCC_OscConfig+0x364>)
 8001ee8:	5ccb      	ldrb	r3, [r1, r3]
 8001eea:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x368>)
 8001eee:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <HAL_RCC_OscConfig+0x36c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2513      	movs	r5, #19
 8001ef6:	197c      	adds	r4, r7, r5
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7fe fea7 	bl	8000c4c <HAL_InitTick>
 8001efe:	0003      	movs	r3, r0
 8001f00:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f02:	197b      	adds	r3, r7, r5
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d060      	beq.n	8001fcc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001f0a:	197b      	adds	r3, r7, r5
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	e242      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d03f      	beq.n	8001f98 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	0049      	lsls	r1, r1, #1
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fec5 	bl	8000cb4 <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f30:	f7fe fec0 	bl	8000cb4 <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e229      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <HAL_RCC_OscConfig+0x370>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	0a19      	lsrs	r1, r3, #8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	061a      	lsls	r2, r3, #24
 8001f70:	4b01      	ldr	r3, [pc, #4]	; (8001f78 <HAL_RCC_OscConfig+0x354>)
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	e029      	b.n	8001fcc <HAL_RCC_OscConfig+0x3a8>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	fffeffff 	.word	0xfffeffff
 8001f80:	fffbffff 	.word	0xfffbffff
 8001f84:	ffffe0ff 	.word	0xffffe0ff
 8001f88:	08003604 	.word	0x08003604
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004
 8001f94:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f98:	4bbd      	ldr	r3, [pc, #756]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4bbc      	ldr	r3, [pc, #752]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8001f9e:	49bd      	ldr	r1, [pc, #756]	; (8002294 <HAL_RCC_OscConfig+0x670>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fe86 	bl	8000cb4 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fae:	f7fe fe81 	bl	8000cb4 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1ea      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fc0:	4bb3      	ldr	r3, [pc, #716]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d036      	beq.n	8002044 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fde:	4bac      	ldr	r3, [pc, #688]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8001fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe2:	4bab      	ldr	r3, [pc, #684]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fe63 	bl	8000cb4 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fe5e 	bl	8000cb4 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1c7      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002006:	4ba2      	ldr	r3, [pc, #648]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d0f1      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x3d0>
 8002010:	e018      	b.n	8002044 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002012:	4b9f      	ldr	r3, [pc, #636]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002016:	4b9e      	ldr	r3, [pc, #632]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002018:	2101      	movs	r1, #1
 800201a:	438a      	bics	r2, r1
 800201c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7fe fe49 	bl	8000cb4 <HAL_GetTick>
 8002022:	0003      	movs	r3, r0
 8002024:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002028:	f7fe fe44 	bl	8000cb4 <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e1ad      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800203a:	4b95      	ldr	r3, [pc, #596]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 800203c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203e:	2202      	movs	r2, #2
 8002040:	4013      	ands	r3, r2
 8002042:	d1f1      	bne.n	8002028 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2204      	movs	r2, #4
 800204a:	4013      	ands	r3, r2
 800204c:	d100      	bne.n	8002050 <HAL_RCC_OscConfig+0x42c>
 800204e:	e0ae      	b.n	80021ae <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002050:	2027      	movs	r0, #39	; 0x27
 8002052:	183b      	adds	r3, r7, r0
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002058:	4b8d      	ldr	r3, [pc, #564]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 800205a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	055b      	lsls	r3, r3, #21
 8002060:	4013      	ands	r3, r2
 8002062:	d109      	bne.n	8002078 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	4b8a      	ldr	r3, [pc, #552]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002068:	4b89      	ldr	r3, [pc, #548]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 800206a:	2180      	movs	r1, #128	; 0x80
 800206c:	0549      	lsls	r1, r1, #21
 800206e:	430a      	orrs	r2, r1
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002072:	183b      	adds	r3, r7, r0
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b87      	ldr	r3, [pc, #540]	; (8002298 <HAL_RCC_OscConfig+0x674>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4013      	ands	r3, r2
 8002082:	d11a      	bne.n	80020ba <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002084:	4b84      	ldr	r3, [pc, #528]	; (8002298 <HAL_RCC_OscConfig+0x674>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b83      	ldr	r3, [pc, #524]	; (8002298 <HAL_RCC_OscConfig+0x674>)
 800208a:	2180      	movs	r1, #128	; 0x80
 800208c:	0049      	lsls	r1, r1, #1
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7fe fe0f 	bl	8000cb4 <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209c:	f7fe fe0a 	bl	8000cb4 <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e173      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	4b7a      	ldr	r3, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x674>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4b2>
 80020c6:	4b72      	ldr	r3, [pc, #456]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80020c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ca:	4b71      	ldr	r3, [pc, #452]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	0049      	lsls	r1, r1, #1
 80020d0:	430a      	orrs	r2, r1
 80020d2:	651a      	str	r2, [r3, #80]	; 0x50
 80020d4:	e031      	b.n	800213a <HAL_RCC_OscConfig+0x516>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4d4>
 80020de:	4b6c      	ldr	r3, [pc, #432]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80020e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020e2:	4b6b      	ldr	r3, [pc, #428]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80020e4:	496b      	ldr	r1, [pc, #428]	; (8002294 <HAL_RCC_OscConfig+0x670>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	651a      	str	r2, [r3, #80]	; 0x50
 80020ea:	4b69      	ldr	r3, [pc, #420]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80020ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ee:	4b68      	ldr	r3, [pc, #416]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80020f0:	496a      	ldr	r1, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x678>)
 80020f2:	400a      	ands	r2, r1
 80020f4:	651a      	str	r2, [r3, #80]	; 0x50
 80020f6:	e020      	b.n	800213a <HAL_RCC_OscConfig+0x516>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	23a0      	movs	r3, #160	; 0xa0
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	429a      	cmp	r2, r3
 8002102:	d10e      	bne.n	8002122 <HAL_RCC_OscConfig+0x4fe>
 8002104:	4b62      	ldr	r3, [pc, #392]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002106:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	00c9      	lsls	r1, r1, #3
 800210e:	430a      	orrs	r2, r1
 8002110:	651a      	str	r2, [r3, #80]	; 0x50
 8002112:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002116:	4b5e      	ldr	r3, [pc, #376]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	0049      	lsls	r1, r1, #1
 800211c:	430a      	orrs	r2, r1
 800211e:	651a      	str	r2, [r3, #80]	; 0x50
 8002120:	e00b      	b.n	800213a <HAL_RCC_OscConfig+0x516>
 8002122:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002124:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002126:	4b5a      	ldr	r3, [pc, #360]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002128:	495a      	ldr	r1, [pc, #360]	; (8002294 <HAL_RCC_OscConfig+0x670>)
 800212a:	400a      	ands	r2, r1
 800212c:	651a      	str	r2, [r3, #80]	; 0x50
 800212e:	4b58      	ldr	r3, [pc, #352]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002132:	4b57      	ldr	r3, [pc, #348]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002134:	4959      	ldr	r1, [pc, #356]	; (800229c <HAL_RCC_OscConfig+0x678>)
 8002136:	400a      	ands	r2, r1
 8002138:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d015      	beq.n	800216e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002142:	f7fe fdb7 	bl	8000cb4 <HAL_GetTick>
 8002146:	0003      	movs	r3, r0
 8002148:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800214a:	e009      	b.n	8002160 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7fe fdb2 	bl	8000cb4 <HAL_GetTick>
 8002150:	0002      	movs	r2, r0
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e11a      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002160:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4013      	ands	r3, r2
 800216a:	d0ef      	beq.n	800214c <HAL_RCC_OscConfig+0x528>
 800216c:	e014      	b.n	8002198 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7fe fda1 	bl	8000cb4 <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002176:	e009      	b.n	800218c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7fe fd9c 	bl	8000cb4 <HAL_GetTick>
 800217c:	0002      	movs	r2, r0
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	4a47      	ldr	r2, [pc, #284]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e104      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800218c:	4b40      	ldr	r3, [pc, #256]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 800218e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4013      	ands	r3, r2
 8002196:	d1ef      	bne.n	8002178 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002198:	2327      	movs	r3, #39	; 0x27
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d105      	bne.n	80021ae <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80021a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a6:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80021a8:	493e      	ldr	r1, [pc, #248]	; (80022a4 <HAL_RCC_OscConfig+0x680>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2220      	movs	r2, #32
 80021b4:	4013      	ands	r3, r2
 80021b6:	d049      	beq.n	800224c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d026      	beq.n	800220e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80021ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	430a      	orrs	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
 80021d8:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_RCC_OscConfig+0x684>)
 80021da:	6a1a      	ldr	r2, [r3, #32]
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_RCC_OscConfig+0x684>)
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	0189      	lsls	r1, r1, #6
 80021e2:	430a      	orrs	r2, r1
 80021e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe fd65 	bl	8000cb4 <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f0:	f7fe fd60 	bl	8000cb4 <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0c9      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2202      	movs	r2, #2
 8002208:	4013      	ands	r3, r2
 800220a:	d0f1      	beq.n	80021f0 <HAL_RCC_OscConfig+0x5cc>
 800220c:	e01e      	b.n	800224c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002214:	2101      	movs	r1, #1
 8002216:	438a      	bics	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <HAL_RCC_OscConfig+0x684>)
 800221c:	6a1a      	ldr	r2, [r3, #32]
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_RCC_OscConfig+0x684>)
 8002220:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_OscConfig+0x688>)
 8002222:	400a      	ands	r2, r1
 8002224:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7fe fd45 	bl	8000cb4 <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002230:	f7fe fd40 	bl	8000cb4 <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e0a9      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2202      	movs	r2, #2
 8002248:	4013      	ands	r3, r2
 800224a:	d1f1      	bne.n	8002230 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	d100      	bne.n	8002256 <HAL_RCC_OscConfig+0x632>
 8002254:	e09e      	b.n	8002394 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	2b0c      	cmp	r3, #12
 800225a:	d100      	bne.n	800225e <HAL_RCC_OscConfig+0x63a>
 800225c:	e077      	b.n	800234e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	2b02      	cmp	r3, #2
 8002264:	d158      	bne.n	8002318 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 800226c:	4910      	ldr	r1, [pc, #64]	; (80022b0 <HAL_RCC_OscConfig+0x68c>)
 800226e:	400a      	ands	r2, r1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7fe fd1f 	bl	8000cb4 <HAL_GetTick>
 8002276:	0003      	movs	r3, r0
 8002278:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800227a:	e01b      	b.n	80022b4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227c:	f7fe fd1a 	bl	8000cb4 <HAL_GetTick>
 8002280:	0002      	movs	r2, r0
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d914      	bls.n	80022b4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e083      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	40021000 	.word	0x40021000
 8002294:	fffffeff 	.word	0xfffffeff
 8002298:	40007000 	.word	0x40007000
 800229c:	fffffbff 	.word	0xfffffbff
 80022a0:	00001388 	.word	0x00001388
 80022a4:	efffffff 	.word	0xefffffff
 80022a8:	40010000 	.word	0x40010000
 80022ac:	ffffdfff 	.word	0xffffdfff
 80022b0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022b4:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <HAL_RCC_OscConfig+0x77c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	049b      	lsls	r3, r3, #18
 80022bc:	4013      	ands	r3, r2
 80022be:	d1dd      	bne.n	800227c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c0:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <HAL_RCC_OscConfig+0x77c>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a37      	ldr	r2, [pc, #220]	; (80023a4 <HAL_RCC_OscConfig+0x780>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d8:	431a      	orrs	r2, r3
 80022da:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <HAL_RCC_OscConfig+0x77c>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_RCC_OscConfig+0x77c>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_RCC_OscConfig+0x77c>)
 80022e6:	2180      	movs	r1, #128	; 0x80
 80022e8:	0449      	lsls	r1, r1, #17
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fce1 	bl	8000cb4 <HAL_GetTick>
 80022f2:	0003      	movs	r3, r0
 80022f4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe fcdc 	bl	8000cb4 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e045      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800230a:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_RCC_OscConfig+0x77c>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	049b      	lsls	r3, r3, #18
 8002312:	4013      	ands	r3, r2
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x6d4>
 8002316:	e03d      	b.n	8002394 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_RCC_OscConfig+0x77c>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_RCC_OscConfig+0x77c>)
 800231e:	4922      	ldr	r1, [pc, #136]	; (80023a8 <HAL_RCC_OscConfig+0x784>)
 8002320:	400a      	ands	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7fe fcc6 	bl	8000cb4 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fcc1 	bl	8000cb4 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e02a      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_RCC_OscConfig+0x77c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	049b      	lsls	r3, r3, #18
 8002348:	4013      	ands	r3, r2
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x70a>
 800234c:	e022      	b.n	8002394 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e01d      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_RCC_OscConfig+0x77c>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	025b      	lsls	r3, r3, #9
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	429a      	cmp	r2, r3
 800236e:	d10f      	bne.n	8002390 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	23f0      	movs	r3, #240	; 0xf0
 8002374:	039b      	lsls	r3, r3, #14
 8002376:	401a      	ands	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d107      	bne.n	8002390 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	23c0      	movs	r3, #192	; 0xc0
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	401a      	ands	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b00a      	add	sp, #40	; 0x28
 800239c:	bdb0      	pop	{r4, r5, r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	40021000 	.word	0x40021000
 80023a4:	ff02ffff 	.word	0xff02ffff
 80023a8:	feffffff 	.word	0xfeffffff

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e128      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b96      	ldr	r3, [pc, #600]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d91e      	bls.n	800240c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b93      	ldr	r3, [pc, #588]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	4393      	bics	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	4b90      	ldr	r3, [pc, #576]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023e0:	f7fe fc68 	bl	8000cb4 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e8:	e009      	b.n	80023fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ea:	f7fe fc63 	bl	8000cb4 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	4a8a      	ldr	r2, [pc, #552]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e109      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b87      	ldr	r3, [pc, #540]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	4013      	ands	r3, r2
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2202      	movs	r2, #2
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	4b83      	ldr	r3, [pc, #524]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	22f0      	movs	r2, #240	; 0xf0
 800241c:	4393      	bics	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	4b7f      	ldr	r3, [pc, #508]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002426:	430a      	orrs	r2, r1
 8002428:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	4013      	ands	r3, r2
 8002432:	d100      	bne.n	8002436 <HAL_RCC_ClockConfig+0x8a>
 8002434:	e089      	b.n	800254a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800243e:	4b79      	ldr	r3, [pc, #484]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	029b      	lsls	r3, r3, #10
 8002446:	4013      	ands	r3, r2
 8002448:	d120      	bne.n	800248c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0e1      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002456:	4b73      	ldr	r3, [pc, #460]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	049b      	lsls	r3, r3, #18
 800245e:	4013      	ands	r3, r2
 8002460:	d114      	bne.n	800248c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0d5      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d106      	bne.n	800247c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2204      	movs	r2, #4
 8002474:	4013      	ands	r3, r2
 8002476:	d109      	bne.n	800248c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0ca      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800247c:	4b69      	ldr	r3, [pc, #420]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4013      	ands	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0c2      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248c:	4b65      	ldr	r3, [pc, #404]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2203      	movs	r2, #3
 8002492:	4393      	bics	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4b62      	ldr	r3, [pc, #392]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a0:	f7fe fc08 	bl	8000cb4 <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d111      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b0:	e009      	b.n	80024c6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b2:	f7fe fbff 	bl	8000cb4 <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0a5      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c6:	4b57      	ldr	r3, [pc, #348]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	220c      	movs	r2, #12
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d1ef      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x106>
 80024d2:	e03a      	b.n	800254a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d111      	bne.n	8002500 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	e009      	b.n	80024f2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7fe fbe9 	bl	8000cb4 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4a4d      	ldr	r2, [pc, #308]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e08f      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f2:	4b4c      	ldr	r3, [pc, #304]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	220c      	movs	r2, #12
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d1ef      	bne.n	80024de <HAL_RCC_ClockConfig+0x132>
 80024fe:	e024      	b.n	800254a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d11b      	bne.n	8002540 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002508:	e009      	b.n	800251e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250a:	f7fe fbd3 	bl	8000cb4 <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e079      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800251e:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	220c      	movs	r2, #12
 8002524:	4013      	ands	r3, r2
 8002526:	2b04      	cmp	r3, #4
 8002528:	d1ef      	bne.n	800250a <HAL_RCC_ClockConfig+0x15e>
 800252a:	e00e      	b.n	800254a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7fe fbc2 	bl	8000cb4 <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	4a3a      	ldr	r2, [pc, #232]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e068      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002540:	4b38      	ldr	r3, [pc, #224]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	220c      	movs	r2, #12
 8002546:	4013      	ands	r3, r2
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254a:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	4013      	ands	r3, r2
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d21e      	bcs.n	8002596 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002558:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2201      	movs	r2, #1
 800255e:	4393      	bics	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800256a:	f7fe fba3 	bl	8000cb4 <HAL_GetTick>
 800256e:	0003      	movs	r3, r0
 8002570:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	e009      	b.n	8002588 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7fe fb9e 	bl	8000cb4 <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	4a28      	ldr	r2, [pc, #160]	; (8002620 <HAL_RCC_ClockConfig+0x274>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e044      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_ClockConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d1ee      	bne.n	8002574 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2204      	movs	r2, #4
 800259c:	4013      	ands	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a0:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_RCC_ClockConfig+0x27c>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2208      	movs	r2, #8
 80025ba:	4013      	ands	r3, r2
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_RCC_ClockConfig+0x280>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	00da      	lsls	r2, r3, #3
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d4:	f000 f832 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025d8:	0001      	movs	r1, r0
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	220f      	movs	r2, #15
 80025e2:	4013      	ands	r3, r2
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x284>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	000a      	movs	r2, r1
 80025ea:	40da      	lsrs	r2, r3
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_RCC_ClockConfig+0x288>)
 80025ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_RCC_ClockConfig+0x28c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	250b      	movs	r5, #11
 80025f6:	197c      	adds	r4, r7, r5
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7fe fb27 	bl	8000c4c <HAL_InitTick>
 80025fe:	0003      	movs	r3, r0
 8002600:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002602:	197b      	adds	r3, r7, r5
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800260a:	197b      	adds	r3, r7, r5
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	e000      	b.n	8002612 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b004      	add	sp, #16
 8002618:	bdb0      	pop	{r4, r5, r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40022000 	.word	0x40022000
 8002620:	00001388 	.word	0x00001388
 8002624:	40021000 	.word	0x40021000
 8002628:	fffff8ff 	.word	0xfffff8ff
 800262c:	ffffc7ff 	.word	0xffffc7ff
 8002630:	08003604 	.word	0x08003604
 8002634:	20000000 	.word	0x20000000
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b5b0      	push	{r4, r5, r7, lr}
 800263e:	b08e      	sub	sp, #56	; 0x38
 8002640:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCC_GetSysClockFreq+0x138>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264a:	230c      	movs	r3, #12
 800264c:	4013      	ands	r3, r2
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d014      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x40>
 8002652:	d900      	bls.n	8002656 <HAL_RCC_GetSysClockFreq+0x1a>
 8002654:	e07b      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x112>
 8002656:	2b04      	cmp	r3, #4
 8002658:	d002      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x24>
 800265a:	2b08      	cmp	r3, #8
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x3a>
 800265e:	e076      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002660:	4b44      	ldr	r3, [pc, #272]	; (8002774 <HAL_RCC_GetSysClockFreq+0x138>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	4013      	ands	r3, r2
 8002668:	d002      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_GetSysClockFreq+0x13c>)
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800266e:	e07c      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002670:	4b42      	ldr	r3, [pc, #264]	; (800277c <HAL_RCC_GetSysClockFreq+0x140>)
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002674:	e079      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002676:	4b42      	ldr	r3, [pc, #264]	; (8002780 <HAL_RCC_GetSysClockFreq+0x144>)
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800267a:	e076      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	0c9a      	lsrs	r2, r3, #18
 8002680:	230f      	movs	r3, #15
 8002682:	401a      	ands	r2, r3
 8002684:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_GetSysClockFreq+0x148>)
 8002686:	5c9b      	ldrb	r3, [r3, r2]
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	0d9a      	lsrs	r2, r3, #22
 800268e:	2303      	movs	r3, #3
 8002690:	4013      	ands	r3, r2
 8002692:	3301      	adds	r3, #1
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_RCC_GetSysClockFreq+0x138>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	025b      	lsls	r3, r3, #9
 800269e:	4013      	ands	r3, r2
 80026a0:	d01a      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	4a35      	ldr	r2, [pc, #212]	; (8002780 <HAL_RCC_GetSysClockFreq+0x144>)
 80026ac:	2300      	movs	r3, #0
 80026ae:	69b8      	ldr	r0, [r7, #24]
 80026b0:	69f9      	ldr	r1, [r7, #28]
 80026b2:	f7fd fdd5 	bl	8000260 <__aeabi_lmul>
 80026b6:	0002      	movs	r2, r0
 80026b8:	000b      	movs	r3, r1
 80026ba:	0010      	movs	r0, r2
 80026bc:	0019      	movs	r1, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f7fd fda9 	bl	8000220 <__aeabi_uldivmod>
 80026ce:	0002      	movs	r2, r0
 80026d0:	000b      	movs	r3, r1
 80026d2:	0013      	movs	r3, r2
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
 80026d6:	e037      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_RCC_GetSysClockFreq+0x138>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2210      	movs	r2, #16
 80026de:	4013      	ands	r3, r2
 80026e0:	d01a      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026ec:	2300      	movs	r3, #0
 80026ee:	68b8      	ldr	r0, [r7, #8]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	f7fd fdb5 	bl	8000260 <__aeabi_lmul>
 80026f6:	0002      	movs	r2, r0
 80026f8:	000b      	movs	r3, r1
 80026fa:	0010      	movs	r0, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f7fd fd89 	bl	8000220 <__aeabi_uldivmod>
 800270e:	0002      	movs	r2, r0
 8002710:	000b      	movs	r3, r1
 8002712:	0013      	movs	r3, r2
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
 8002716:	e017      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	0018      	movs	r0, r3
 800271c:	2300      	movs	r3, #0
 800271e:	0019      	movs	r1, r3
 8002720:	4a16      	ldr	r2, [pc, #88]	; (800277c <HAL_RCC_GetSysClockFreq+0x140>)
 8002722:	2300      	movs	r3, #0
 8002724:	f7fd fd9c 	bl	8000260 <__aeabi_lmul>
 8002728:	0002      	movs	r2, r0
 800272a:	000b      	movs	r3, r1
 800272c:	0010      	movs	r0, r2
 800272e:	0019      	movs	r1, r3
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	001c      	movs	r4, r3
 8002734:	2300      	movs	r3, #0
 8002736:	001d      	movs	r5, r3
 8002738:	0022      	movs	r2, r4
 800273a:	002b      	movs	r3, r5
 800273c:	f7fd fd70 	bl	8000220 <__aeabi_uldivmod>
 8002740:	0002      	movs	r2, r0
 8002742:	000b      	movs	r3, r1
 8002744:	0013      	movs	r3, r2
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800274c:	e00d      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_GetSysClockFreq+0x138>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0b5b      	lsrs	r3, r3, #13
 8002754:	2207      	movs	r2, #7
 8002756:	4013      	ands	r3, r2
 8002758:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	3301      	adds	r3, #1
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	0212      	lsls	r2, r2, #8
 8002762:	409a      	lsls	r2, r3
 8002764:	0013      	movs	r3, r2
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002768:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b00e      	add	sp, #56	; 0x38
 8002772:	bdb0      	pop	{r4, r5, r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	003d0900 	.word	0x003d0900
 800277c:	00f42400 	.word	0x00f42400
 8002780:	007a1200 	.word	0x007a1200
 8002784:	08003614 	.word	0x08003614

08002788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e032      	b.n	8002800 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2239      	movs	r2, #57	; 0x39
 800279e:	5c9b      	ldrb	r3, [r3, r2]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2238      	movs	r2, #56	; 0x38
 80027aa:	2100      	movs	r1, #0
 80027ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7fe f8f9 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2239      	movs	r2, #57	; 0x39
 80027ba:	2102      	movs	r1, #2
 80027bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	0019      	movs	r1, r3
 80027c8:	0010      	movs	r0, r2
 80027ca:	f000 fc75 	bl	80030b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	223e      	movs	r2, #62	; 0x3e
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223a      	movs	r2, #58	; 0x3a
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223b      	movs	r2, #59	; 0x3b
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	223c      	movs	r2, #60	; 0x3c
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223d      	movs	r2, #61	; 0x3d
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2239      	movs	r2, #57	; 0x39
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e032      	b.n	8002880 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2239      	movs	r2, #57	; 0x39
 800281e:	5c9b      	ldrb	r3, [r3, r2]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d107      	bne.n	8002836 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2238      	movs	r2, #56	; 0x38
 800282a:	2100      	movs	r1, #0
 800282c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f829 	bl	8002888 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2239      	movs	r2, #57	; 0x39
 800283a:	2102      	movs	r1, #2
 800283c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	0019      	movs	r1, r3
 8002848:	0010      	movs	r0, r2
 800284a:	f000 fc35 	bl	80030b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	223e      	movs	r2, #62	; 0x3e
 8002852:	2101      	movs	r1, #1
 8002854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	223a      	movs	r2, #58	; 0x3a
 800285a:	2101      	movs	r1, #1
 800285c:	5499      	strb	r1, [r3, r2]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	223b      	movs	r2, #59	; 0x3b
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	223c      	movs	r2, #60	; 0x3c
 800286a:	2101      	movs	r1, #1
 800286c:	5499      	strb	r1, [r3, r2]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	223d      	movs	r2, #61	; 0x3d
 8002872:	2101      	movs	r1, #1
 8002874:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2239      	movs	r2, #57	; 0x39
 800287a:	2101      	movs	r1, #1
 800287c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b002      	add	sp, #8
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	001a      	movs	r2, r3
 80028a6:	1cbb      	adds	r3, r7, #2
 80028a8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028aa:	2317      	movs	r3, #23
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d108      	bne.n	80028ca <HAL_TIM_PWM_Start_DMA+0x32>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	223a      	movs	r2, #58	; 0x3a
 80028bc:	5c9b      	ldrb	r3, [r3, r2]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	3b02      	subs	r3, #2
 80028c2:	425a      	negs	r2, r3
 80028c4:	4153      	adcs	r3, r2
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e01f      	b.n	800290a <HAL_TIM_PWM_Start_DMA+0x72>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d108      	bne.n	80028e2 <HAL_TIM_PWM_Start_DMA+0x4a>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	223b      	movs	r2, #59	; 0x3b
 80028d4:	5c9b      	ldrb	r3, [r3, r2]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3b02      	subs	r3, #2
 80028da:	425a      	negs	r2, r3
 80028dc:	4153      	adcs	r3, r2
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	e013      	b.n	800290a <HAL_TIM_PWM_Start_DMA+0x72>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d108      	bne.n	80028fa <HAL_TIM_PWM_Start_DMA+0x62>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	223c      	movs	r2, #60	; 0x3c
 80028ec:	5c9b      	ldrb	r3, [r3, r2]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	3b02      	subs	r3, #2
 80028f2:	425a      	negs	r2, r3
 80028f4:	4153      	adcs	r3, r2
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	e007      	b.n	800290a <HAL_TIM_PWM_Start_DMA+0x72>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	223d      	movs	r2, #61	; 0x3d
 80028fe:	5c9b      	ldrb	r3, [r3, r2]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3b02      	subs	r3, #2
 8002904:	425a      	negs	r2, r3
 8002906:	4153      	adcs	r3, r2
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800290e:	2302      	movs	r3, #2
 8002910:	e13d      	b.n	8002b8e <HAL_TIM_PWM_Start_DMA+0x2f6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d108      	bne.n	800292a <HAL_TIM_PWM_Start_DMA+0x92>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	223a      	movs	r2, #58	; 0x3a
 800291c:	5c9b      	ldrb	r3, [r3, r2]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	425a      	negs	r2, r3
 8002924:	4153      	adcs	r3, r2
 8002926:	b2db      	uxtb	r3, r3
 8002928:	e01f      	b.n	800296a <HAL_TIM_PWM_Start_DMA+0xd2>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d108      	bne.n	8002942 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	223b      	movs	r2, #59	; 0x3b
 8002934:	5c9b      	ldrb	r3, [r3, r2]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	425a      	negs	r2, r3
 800293c:	4153      	adcs	r3, r2
 800293e:	b2db      	uxtb	r3, r3
 8002940:	e013      	b.n	800296a <HAL_TIM_PWM_Start_DMA+0xd2>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d108      	bne.n	800295a <HAL_TIM_PWM_Start_DMA+0xc2>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	223c      	movs	r2, #60	; 0x3c
 800294c:	5c9b      	ldrb	r3, [r3, r2]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	425a      	negs	r2, r3
 8002954:	4153      	adcs	r3, r2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	e007      	b.n	800296a <HAL_TIM_PWM_Start_DMA+0xd2>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	223d      	movs	r2, #61	; 0x3d
 800295e:	5c9b      	ldrb	r3, [r3, r2]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	425a      	negs	r2, r3
 8002966:	4153      	adcs	r3, r2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d025      	beq.n	80029ba <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_TIM_PWM_Start_DMA+0xe8>
 8002974:	1cbb      	adds	r3, r7, #2
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e106      	b.n	8002b8e <HAL_TIM_PWM_Start_DMA+0x2f6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d104      	bne.n	8002990 <HAL_TIM_PWM_Start_DMA+0xf8>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	223a      	movs	r2, #58	; 0x3a
 800298a:	2102      	movs	r1, #2
 800298c:	5499      	strb	r1, [r3, r2]
 800298e:	e016      	b.n	80029be <HAL_TIM_PWM_Start_DMA+0x126>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d104      	bne.n	80029a0 <HAL_TIM_PWM_Start_DMA+0x108>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	223b      	movs	r2, #59	; 0x3b
 800299a:	2102      	movs	r1, #2
 800299c:	5499      	strb	r1, [r3, r2]
 800299e:	e00e      	b.n	80029be <HAL_TIM_PWM_Start_DMA+0x126>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d104      	bne.n	80029b0 <HAL_TIM_PWM_Start_DMA+0x118>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	223c      	movs	r2, #60	; 0x3c
 80029aa:	2102      	movs	r1, #2
 80029ac:	5499      	strb	r1, [r3, r2]
 80029ae:	e006      	b.n	80029be <HAL_TIM_PWM_Start_DMA+0x126>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	223d      	movs	r2, #61	; 0x3d
 80029b4:	2102      	movs	r1, #2
 80029b6:	5499      	strb	r1, [r3, r2]
 80029b8:	e001      	b.n	80029be <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0e7      	b.n	8002b8e <HAL_TIM_PWM_Start_DMA+0x2f6>
  }

  switch (Channel)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	d100      	bne.n	80029c6 <HAL_TIM_PWM_Start_DMA+0x12e>
 80029c4:	e080      	b.n	8002ac8 <HAL_TIM_PWM_Start_DMA+0x230>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	d900      	bls.n	80029ce <HAL_TIM_PWM_Start_DMA+0x136>
 80029cc:	e0a1      	b.n	8002b12 <HAL_TIM_PWM_Start_DMA+0x27a>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d054      	beq.n	8002a7e <HAL_TIM_PWM_Start_DMA+0x1e6>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d900      	bls.n	80029dc <HAL_TIM_PWM_Start_DMA+0x144>
 80029da:	e09a      	b.n	8002b12 <HAL_TIM_PWM_Start_DMA+0x27a>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_PWM_Start_DMA+0x152>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d025      	beq.n	8002a34 <HAL_TIM_PWM_Start_DMA+0x19c>
 80029e8:	e093      	b.n	8002b12 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4a6a      	ldr	r2, [pc, #424]	; (8002b98 <HAL_TIM_PWM_Start_DMA+0x300>)
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	4a69      	ldr	r2, [pc, #420]	; (8002b9c <HAL_TIM_PWM_Start_DMA+0x304>)
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a68      	ldr	r2, [pc, #416]	; (8002ba0 <HAL_TIM_PWM_Start_DMA+0x308>)
 8002a00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a18      	ldr	r0, [r3, #32]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3334      	adds	r3, #52	; 0x34
 8002a0e:	001a      	movs	r2, r3
 8002a10:	1cbb      	adds	r3, r7, #2
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	f7fe fe4e 	bl	80016b4 <HAL_DMA_Start_IT>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b6      	b.n	8002b8e <HAL_TIM_PWM_Start_DMA+0x2f6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2180      	movs	r1, #128	; 0x80
 8002a2c:	0089      	lsls	r1, r1, #2
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	60da      	str	r2, [r3, #12]
      break;
 8002a32:	e073      	b.n	8002b1c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	4a57      	ldr	r2, [pc, #348]	; (8002b98 <HAL_TIM_PWM_Start_DMA+0x300>)
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	4a56      	ldr	r2, [pc, #344]	; (8002b9c <HAL_TIM_PWM_Start_DMA+0x304>)
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	4a55      	ldr	r2, [pc, #340]	; (8002ba0 <HAL_TIM_PWM_Start_DMA+0x308>)
 8002a4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3338      	adds	r3, #56	; 0x38
 8002a58:	001a      	movs	r2, r3
 8002a5a:	1cbb      	adds	r3, r7, #2
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	f7fe fe29 	bl	80016b4 <HAL_DMA_Start_IT>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e091      	b.n	8002b8e <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	00c9      	lsls	r1, r1, #3
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]
      break;
 8002a7c:	e04e      	b.n	8002b1c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	4a45      	ldr	r2, [pc, #276]	; (8002b98 <HAL_TIM_PWM_Start_DMA+0x300>)
 8002a84:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	4a44      	ldr	r2, [pc, #272]	; (8002b9c <HAL_TIM_PWM_Start_DMA+0x304>)
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	4a43      	ldr	r2, [pc, #268]	; (8002ba0 <HAL_TIM_PWM_Start_DMA+0x308>)
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	333c      	adds	r3, #60	; 0x3c
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	1cbb      	adds	r3, r7, #2
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	f7fe fe04 	bl	80016b4 <HAL_DMA_Start_IT>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e06c      	b.n	8002b8e <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	0109      	lsls	r1, r1, #4
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	60da      	str	r2, [r3, #12]
      break;
 8002ac6:	e029      	b.n	8002b1c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	4a32      	ldr	r2, [pc, #200]	; (8002b98 <HAL_TIM_PWM_Start_DMA+0x300>)
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <HAL_TIM_PWM_Start_DMA+0x304>)
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	4a30      	ldr	r2, [pc, #192]	; (8002ba0 <HAL_TIM_PWM_Start_DMA+0x308>)
 8002ade:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3340      	adds	r3, #64	; 0x40
 8002aec:	001a      	movs	r2, r3
 8002aee:	1cbb      	adds	r3, r7, #2
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	f7fe fddf 	bl	80016b4 <HAL_DMA_Start_IT>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d001      	beq.n	8002afe <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e047      	b.n	8002b8e <HAL_TIM_PWM_Start_DMA+0x2f6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	0149      	lsls	r1, r1, #5
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]
      break;
 8002b10:	e004      	b.n	8002b1c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8002b12:	2317      	movs	r3, #23
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]
      break;
 8002b1a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002b1c:	2317      	movs	r3, #23
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d130      	bne.n	8002b88 <HAL_TIM_PWM_Start_DMA+0x2f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 fcb4 	bl	800349c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	05db      	lsls	r3, r3, #23
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d009      	beq.n	8002b54 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <HAL_TIM_PWM_Start_DMA+0x30c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_TIM_PWM_Start_DMA+0x2bc>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <HAL_TIM_PWM_Start_DMA+0x310>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d111      	bne.n	8002b78 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d010      	beq.n	8002b88 <HAL_TIM_PWM_Start_DMA+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b76:	e007      	b.n	8002b88 <HAL_TIM_PWM_Start_DMA+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2101      	movs	r1, #1
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002b88:	2317      	movs	r3, #23
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	781b      	ldrb	r3, [r3, #0]
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b006      	add	sp, #24
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	08002fa5 	.word	0x08002fa5
 8002b9c:	0800304f 	.word	0x0800304f
 8002ba0:	08002f11 	.word	0x08002f11
 8002ba4:	40010800 	.word	0x40010800
 8002ba8:	40011400 	.word	0x40011400

08002bac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2317      	movs	r3, #23
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2238      	movs	r2, #56	; 0x38
 8002bc4:	5c9b      	ldrb	r3, [r3, r2]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_TIM_PWM_ConfigChannel+0x22>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e0ad      	b.n	8002d2a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2238      	movs	r2, #56	; 0x38
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0c      	cmp	r3, #12
 8002bda:	d100      	bne.n	8002bde <HAL_TIM_PWM_ConfigChannel+0x32>
 8002bdc:	e076      	b.n	8002ccc <HAL_TIM_PWM_ConfigChannel+0x120>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d900      	bls.n	8002be6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002be4:	e095      	b.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d04e      	beq.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0xde>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d900      	bls.n	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002bf2:	e08e      	b.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d021      	beq.n	8002c44 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c00:	e087      	b.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	0011      	movs	r1, r2
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 faa8 	bl	8003160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6999      	ldr	r1, [r3, #24]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	619a      	str	r2, [r3, #24]
      break;
 8002c42:	e06b      	b.n	8002d1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 fac3 	bl	80031d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	0109      	lsls	r1, r1, #4
 8002c60:	430a      	orrs	r2, r1
 8002c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4931      	ldr	r1, [pc, #196]	; (8002d34 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6999      	ldr	r1, [r3, #24]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	021a      	lsls	r2, r3, #8
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	619a      	str	r2, [r3, #24]
      break;
 8002c88:	e048      	b.n	8002d1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	0011      	movs	r1, r2
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 fae2 	bl	800325c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2108      	movs	r1, #8
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2104      	movs	r1, #4
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69d9      	ldr	r1, [r3, #28]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	61da      	str	r2, [r3, #28]
      break;
 8002cca:	e027      	b.n	8002d1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 fb01 	bl	80032dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	0109      	lsls	r1, r1, #4
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	490f      	ldr	r1, [pc, #60]	; (8002d34 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69d9      	ldr	r1, [r3, #28]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	021a      	lsls	r2, r3, #8
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	61da      	str	r2, [r3, #28]
      break;
 8002d10:	e004      	b.n	8002d1c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d12:	2317      	movs	r3, #23
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
      break;
 8002d1a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2238      	movs	r2, #56	; 0x38
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]

  return status;
 8002d24:	2317      	movs	r3, #23
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	781b      	ldrb	r3, [r3, #0]
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b006      	add	sp, #24
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	fffffbff 	.word	0xfffffbff

08002d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d42:	230f      	movs	r3, #15
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2238      	movs	r2, #56	; 0x38
 8002d4e:	5c9b      	ldrb	r3, [r3, r2]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_TIM_ConfigClockSource+0x20>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0bc      	b.n	8002ed2 <HAL_TIM_ConfigClockSource+0x19a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2238      	movs	r2, #56	; 0x38
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2239      	movs	r2, #57	; 0x39
 8002d64:	2102      	movs	r1, #2
 8002d66:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2277      	movs	r2, #119	; 0x77
 8002d74:	4393      	bics	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4a58      	ldr	r2, [pc, #352]	; (8002edc <HAL_TIM_ConfigClockSource+0x1a4>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	0192      	lsls	r2, r2, #6
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d040      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0xde>
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	0192      	lsls	r2, r2, #6
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d900      	bls.n	8002d9e <HAL_TIM_ConfigClockSource+0x66>
 8002d9c:	e088      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x178>
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	0152      	lsls	r2, r2, #5
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d100      	bne.n	8002da8 <HAL_TIM_ConfigClockSource+0x70>
 8002da6:	e088      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x182>
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	0152      	lsls	r2, r2, #5
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d900      	bls.n	8002db2 <HAL_TIM_ConfigClockSource+0x7a>
 8002db0:	e07e      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x178>
 8002db2:	2b70      	cmp	r3, #112	; 0x70
 8002db4:	d018      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0xb0>
 8002db6:	d900      	bls.n	8002dba <HAL_TIM_ConfigClockSource+0x82>
 8002db8:	e07a      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x178>
 8002dba:	2b60      	cmp	r3, #96	; 0x60
 8002dbc:	d04f      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x126>
 8002dbe:	d900      	bls.n	8002dc2 <HAL_TIM_ConfigClockSource+0x8a>
 8002dc0:	e076      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x178>
 8002dc2:	2b50      	cmp	r3, #80	; 0x50
 8002dc4:	d03b      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x106>
 8002dc6:	d900      	bls.n	8002dca <HAL_TIM_ConfigClockSource+0x92>
 8002dc8:	e072      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x178>
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d057      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0x146>
 8002dce:	d900      	bls.n	8002dd2 <HAL_TIM_ConfigClockSource+0x9a>
 8002dd0:	e06e      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x178>
 8002dd2:	2b30      	cmp	r3, #48	; 0x30
 8002dd4:	d063      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x166>
 8002dd6:	d86b      	bhi.n	8002eb0 <HAL_TIM_ConfigClockSource+0x178>
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d060      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x166>
 8002ddc:	d868      	bhi.n	8002eb0 <HAL_TIM_ConfigClockSource+0x178>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d05d      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x166>
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d05b      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x166>
 8002de6:	e063      	b.n	8002eb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6899      	ldr	r1, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f000 fb30 	bl	800345c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2277      	movs	r2, #119	; 0x77
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	609a      	str	r2, [r3, #8]
      break;
 8002e14:	e052      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6899      	ldr	r1, [r3, #8]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f000 fb19 	bl	800345c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	01c9      	lsls	r1, r1, #7
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
      break;
 8002e3c:	e03e      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	f000 fa8c 	bl	8003368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2150      	movs	r1, #80	; 0x50
 8002e56:	0018      	movs	r0, r3
 8002e58:	f000 fae6 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002e5c:	e02e      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6859      	ldr	r1, [r3, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	f000 faaa 	bl	80033c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2160      	movs	r1, #96	; 0x60
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 fad6 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002e7c:	e01e      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6859      	ldr	r1, [r3, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	f000 fa6c 	bl	8003368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2140      	movs	r1, #64	; 0x40
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 fac6 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002e9c:	e00e      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	f000 fabd 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002eae:	e005      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
      break;
 8002eb8:	e000      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002eba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2239      	movs	r2, #57	; 0x39
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2238      	movs	r2, #56	; 0x38
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5499      	strb	r1, [r3, r2]

  return status;
 8002ecc:	230f      	movs	r3, #15
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	ffff00ff 	.word	0xffff00ff

08002ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d107      	bne.n	8002f38 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	223a      	movs	r2, #58	; 0x3a
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]
 8002f36:	e02a      	b.n	8002f8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d107      	bne.n	8002f52 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2202      	movs	r2, #2
 8002f46:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	223b      	movs	r2, #59	; 0x3b
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	5499      	strb	r1, [r3, r2]
 8002f50:	e01d      	b.n	8002f8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d107      	bne.n	8002f6c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	223c      	movs	r2, #60	; 0x3c
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]
 8002f6a:	e010      	b.n	8002f8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d107      	bne.n	8002f86 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	223d      	movs	r2, #61	; 0x3d
 8002f80:	2101      	movs	r1, #1
 8002f82:	5499      	strb	r1, [r3, r2]
 8002f84:	e003      	b.n	8002f8e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2239      	movs	r2, #57	; 0x39
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7ff ffb5 	bl	8002f00 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	761a      	strb	r2, [r3, #24]
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d10b      	bne.n	8002fd4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d136      	bne.n	8003038 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	223a      	movs	r2, #58	; 0x3a
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]
 8002fd2:	e031      	b.n	8003038 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d10b      	bne.n	8002ff6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d125      	bne.n	8003038 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	223b      	movs	r2, #59	; 0x3b
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	5499      	strb	r1, [r3, r2]
 8002ff4:	e020      	b.n	8003038 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d10b      	bne.n	8003018 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2204      	movs	r2, #4
 8003004:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d114      	bne.n	8003038 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	223c      	movs	r2, #60	; 0x3c
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]
 8003016:	e00f      	b.n	8003038 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	d10a      	bne.n	8003038 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2208      	movs	r2, #8
 8003026:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d103      	bne.n	8003038 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	223d      	movs	r2, #61	; 0x3d
 8003034:	2101      	movs	r1, #1
 8003036:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	0018      	movs	r0, r3
 800303c:	f7ff ff50 	bl	8002ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	761a      	strb	r2, [r3, #24]
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}

0800304e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d103      	bne.n	800306e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	761a      	strb	r2, [r3, #24]
 800306c:	e019      	b.n	80030a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d103      	bne.n	8003080 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2202      	movs	r2, #2
 800307c:	761a      	strb	r2, [r3, #24]
 800307e:	e010      	b.n	80030a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	d103      	bne.n	8003092 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2204      	movs	r2, #4
 800308e:	761a      	strb	r2, [r3, #24]
 8003090:	e007      	b.n	80030a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	d102      	bne.n	80030a2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2208      	movs	r2, #8
 80030a0:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7ff ff23 	bl	8002ef0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	761a      	strb	r2, [r3, #24]
}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b004      	add	sp, #16
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	05db      	lsls	r3, r3, #23
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0x2a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <TIM_Base_SetConfig+0x9c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0x2a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <TIM_Base_SetConfig+0xa0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2270      	movs	r2, #112	; 0x70
 80030e6:	4393      	bics	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	05db      	lsls	r3, r3, #23
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d007      	beq.n	800310e <TIM_Base_SetConfig+0x56>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a14      	ldr	r2, [pc, #80]	; (8003154 <TIM_Base_SetConfig+0x9c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d003      	beq.n	800310e <TIM_Base_SetConfig+0x56>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a13      	ldr	r2, [pc, #76]	; (8003158 <TIM_Base_SetConfig+0xa0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d108      	bne.n	8003120 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a12      	ldr	r2, [pc, #72]	; (800315c <TIM_Base_SetConfig+0xa4>)
 8003112:	4013      	ands	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	4393      	bics	r3, r2
 8003126:	001a      	movs	r2, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	615a      	str	r2, [r3, #20]
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b004      	add	sp, #16
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40010800 	.word	0x40010800
 8003158:	40011400 	.word	0x40011400
 800315c:	fffffcff 	.word	0xfffffcff

08003160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	2201      	movs	r2, #1
 8003170:	4393      	bics	r3, r2
 8003172:	001a      	movs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2270      	movs	r2, #112	; 0x70
 800318e:	4393      	bics	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2203      	movs	r2, #3
 8003196:	4393      	bics	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2202      	movs	r2, #2
 80031a8:	4393      	bics	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b006      	add	sp, #24
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	2210      	movs	r2, #16
 80031e8:	4393      	bics	r3, r2
 80031ea:	001a      	movs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a13      	ldr	r2, [pc, #76]	; (8003254 <TIM_OC2_SetConfig+0x7c>)
 8003206:	4013      	ands	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a12      	ldr	r2, [pc, #72]	; (8003258 <TIM_OC2_SetConfig+0x80>)
 800320e:	4013      	ands	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2220      	movs	r2, #32
 8003222:	4393      	bics	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	621a      	str	r2, [r3, #32]
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b006      	add	sp, #24
 8003252:	bd80      	pop	{r7, pc}
 8003254:	ffff8fff 	.word	0xffff8fff
 8003258:	fffffcff 	.word	0xfffffcff

0800325c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a1a      	ldr	r2, [pc, #104]	; (80032d4 <TIM_OC3_SetConfig+0x78>)
 800326c:	401a      	ands	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2270      	movs	r2, #112	; 0x70
 8003288:	4393      	bics	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2203      	movs	r2, #3
 8003290:	4393      	bics	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <TIM_OC3_SetConfig+0x7c>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	621a      	str	r2, [r3, #32]
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b006      	add	sp, #24
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	fffffeff 	.word	0xfffffeff
 80032d8:	fffffdff 	.word	0xfffffdff

080032dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <TIM_OC4_SetConfig+0x7c>)
 80032ec:	401a      	ands	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a15      	ldr	r2, [pc, #84]	; (800335c <TIM_OC4_SetConfig+0x80>)
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a14      	ldr	r2, [pc, #80]	; (8003360 <TIM_OC4_SetConfig+0x84>)
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4a10      	ldr	r2, [pc, #64]	; (8003364 <TIM_OC4_SetConfig+0x88>)
 8003324:	4013      	ands	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	031b      	lsls	r3, r3, #12
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b006      	add	sp, #24
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	ffffefff 	.word	0xffffefff
 800335c:	ffff8fff 	.word	0xffff8fff
 8003360:	fffffcff 	.word	0xfffffcff
 8003364:	ffffdfff 	.word	0xffffdfff

08003368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	2201      	movs	r2, #1
 8003380:	4393      	bics	r3, r2
 8003382:	001a      	movs	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	22f0      	movs	r2, #240	; 0xf0
 8003392:	4393      	bics	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	220a      	movs	r2, #10
 80033a4:	4393      	bics	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	621a      	str	r2, [r3, #32]
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b006      	add	sp, #24
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	2210      	movs	r2, #16
 80033d6:	4393      	bics	r3, r2
 80033d8:	001a      	movs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <TIM_TI2_ConfigInputStage+0x60>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	031b      	lsls	r3, r3, #12
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	22a0      	movs	r2, #160	; 0xa0
 8003400:	4393      	bics	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b006      	add	sp, #24
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	ffff0fff 	.word	0xffff0fff

08003428 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2270      	movs	r2, #112	; 0x70
 800343c:	4393      	bics	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	2207      	movs	r2, #7
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b004      	add	sp, #16
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	4a09      	ldr	r2, [pc, #36]	; (8003498 <TIM_ETR_SetConfig+0x3c>)
 8003474:	4013      	ands	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	021a      	lsls	r2, r3, #8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	431a      	orrs	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4313      	orrs	r3, r2
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b006      	add	sp, #24
 8003496:	bd80      	pop	{r7, pc}
 8003498:	ffff00ff 	.word	0xffff00ff

0800349c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	221f      	movs	r2, #31
 80034ac:	4013      	ands	r3, r2
 80034ae:	2201      	movs	r2, #1
 80034b0:	409a      	lsls	r2, r3
 80034b2:	0013      	movs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	43d2      	mvns	r2, r2
 80034be:	401a      	ands	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	211f      	movs	r1, #31
 80034cc:	400b      	ands	r3, r1
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4099      	lsls	r1, r3
 80034d2:	000b      	movs	r3, r1
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	46bd      	mov	sp, r7
 80034de:	b006      	add	sp, #24
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2238      	movs	r2, #56	; 0x38
 80034f2:	5c9b      	ldrb	r3, [r3, r2]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e042      	b.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2238      	movs	r2, #56	; 0x38
 8003500:	2101      	movs	r1, #1
 8003502:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2239      	movs	r2, #57	; 0x39
 8003508:	2102      	movs	r1, #2
 800350a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2270      	movs	r2, #112	; 0x70
 8003520:	4393      	bics	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	05db      	lsls	r3, r3, #23
 800353e:	429a      	cmp	r2, r3
 8003540:	d009      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a11      	ldr	r2, [pc, #68]	; (800358c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0f      	ldr	r2, [pc, #60]	; (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10c      	bne.n	8003570 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	4393      	bics	r3, r2
 800355c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2239      	movs	r2, #57	; 0x39
 8003574:	2101      	movs	r1, #1
 8003576:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2238      	movs	r2, #56	; 0x38
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b004      	add	sp, #16
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	40010800 	.word	0x40010800
 8003590:	40011400 	.word	0x40011400

08003594 <__libc_init_array>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	2600      	movs	r6, #0
 8003598:	4d0c      	ldr	r5, [pc, #48]	; (80035cc <__libc_init_array+0x38>)
 800359a:	4c0d      	ldr	r4, [pc, #52]	; (80035d0 <__libc_init_array+0x3c>)
 800359c:	1b64      	subs	r4, r4, r5
 800359e:	10a4      	asrs	r4, r4, #2
 80035a0:	42a6      	cmp	r6, r4
 80035a2:	d109      	bne.n	80035b8 <__libc_init_array+0x24>
 80035a4:	2600      	movs	r6, #0
 80035a6:	f000 f821 	bl	80035ec <_init>
 80035aa:	4d0a      	ldr	r5, [pc, #40]	; (80035d4 <__libc_init_array+0x40>)
 80035ac:	4c0a      	ldr	r4, [pc, #40]	; (80035d8 <__libc_init_array+0x44>)
 80035ae:	1b64      	subs	r4, r4, r5
 80035b0:	10a4      	asrs	r4, r4, #2
 80035b2:	42a6      	cmp	r6, r4
 80035b4:	d105      	bne.n	80035c2 <__libc_init_array+0x2e>
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	00b3      	lsls	r3, r6, #2
 80035ba:	58eb      	ldr	r3, [r5, r3]
 80035bc:	4798      	blx	r3
 80035be:	3601      	adds	r6, #1
 80035c0:	e7ee      	b.n	80035a0 <__libc_init_array+0xc>
 80035c2:	00b3      	lsls	r3, r6, #2
 80035c4:	58eb      	ldr	r3, [r5, r3]
 80035c6:	4798      	blx	r3
 80035c8:	3601      	adds	r6, #1
 80035ca:	e7f2      	b.n	80035b2 <__libc_init_array+0x1e>
 80035cc:	08003628 	.word	0x08003628
 80035d0:	08003628 	.word	0x08003628
 80035d4:	08003628 	.word	0x08003628
 80035d8:	0800362c 	.word	0x0800362c

080035dc <memset>:
 80035dc:	0003      	movs	r3, r0
 80035de:	1882      	adds	r2, r0, r2
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d100      	bne.n	80035e6 <memset+0xa>
 80035e4:	4770      	bx	lr
 80035e6:	7019      	strb	r1, [r3, #0]
 80035e8:	3301      	adds	r3, #1
 80035ea:	e7f9      	b.n	80035e0 <memset+0x4>

080035ec <_init>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f2:	bc08      	pop	{r3}
 80035f4:	469e      	mov	lr, r3
 80035f6:	4770      	bx	lr

080035f8 <_fini>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr
